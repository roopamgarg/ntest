{"version":3,"file":"static/webpack/static/development/pages/index.js.e453a54fd24510d30d3e.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { List, Button } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport Layout from \"../components/layout/Layout\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nimport Questions from \"../components/questions/Questions\";\n\nimport { getQuestions } from \"../redux/index\";\nclass IndexPage extends Component {\n  static async getInitialProps({ store, isServer, pathname, query }) {\n    try {\n      const action = await getQuestions(\"\");\n      await action(store.dispatch);\n      return { questions: store.getState().questions };\n    } catch (err) {\n      return {};\n    }\n  }\n  state = {\n    page:0,\n    pageSize:10\n  }\n  loadMore = !this.props.questionsLoader ? (\n    <div\n      style={{\n        textAlign: 'center',\n        marginTop: 12,\n        height: 32,\n        lineHeight: '32px',\n      }}\n    >\n      <Button onClick={this.onLoadMore}>loading more</Button>\n    </div>\n  ) : null;\n  onLoadMore = () => {\n    this.setState({\n      page:this.state.page+1\n    })\n    this.props.getQuestions(\"\",this.state.page+1,this.state.pageSize)\n  }\n  render() {\n    const props = this.props;\n    console.log(props);\n    return (\n      <Layout>\n        <div style={{ padding: \"0 10%\" }}>\n          <List\n            loadMore={this.loadMore}\n            className=\"demo-loadmore-list\"\n            loading={props.questionsLoader}\n            itemLayout=\"horizontal\"\n            dataSource={props.questions}\n            renderItem={(item, index) => <Questions item={item} key={index} index={index} />}\n          />\n          <div style={{ padding: \"2rem\" }}>\n            <AskQuestion {...props}>Ask Question</AskQuestion>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(IndexPage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAUA;AACA;AACA;AAFA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;AAnDA;;;AAEA;AACA;;AADA;;AACA;AACA;;AAAA;AAAA;AAAA;AACA;;;;AACA;AACA;;;;;;;;;;;AARA;AACA;AAsDA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;;;;A","sourceRoot":""}