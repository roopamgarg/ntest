{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { GET_QUESTIONS_FAILURE, GET_QUESTIONS_REQUEST, GET_QUESTIONS_SUCCESS, GET_QUESTION_DESCRIPTION_FAILURE, GET_QUESTION_DESCRIPTION_REQUEST, GET_QUESTION_DESCRIPTION_SUCCESS, ASK_QUESTION_FAILURE, ASK_QUESTION_SUCCESS, ASK_QUESTION_REQUEST, ADD_REPLY_FAILURE, ADD_REPLY_SUCCESS, ADD_REPLY_REQUEST, EDIT_REPLY } from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport { getHeaders } from \"../helpers/getHeaders\";\nimport React from \"react\";\nimport Router from \"next/router\";\n\nvar getQuestionRequest = function getQuestionRequest() {\n  return {\n    type: GET_QUESTIONS_REQUEST\n  };\n};\n\nvar getQuestionSuccess = function getQuestionSuccess(res) {\n  return {\n    type: GET_QUESTIONS_SUCCESS,\n    payload: res\n  };\n};\n\nvar getQuestionFailure = function getQuestionFailure(err) {\n  return {\n    type: GET_QUESTIONS_FAILURE,\n    payload: err\n  };\n};\n\nvar getCurrentQuestionReq = function getCurrentQuestionReq() {\n  return {\n    type: GET_QUESTION_DESCRIPTION_REQUEST\n  };\n};\n\nvar getCurrentQuestionSuccess = function getCurrentQuestionSuccess(res) {\n  return {\n    type: GET_QUESTION_DESCRIPTION_SUCCESS,\n    payload: res\n  };\n};\n\nvar getCurrentQuestionFailure = function getCurrentQuestionFailure(err) {\n  return {\n    type: GET_QUESTION_DESCRIPTION_FAILURE,\n    payload: err\n  };\n};\n\nvar askQuestionRequest = function askQuestionRequest() {\n  return {\n    type: ASK_QUESTION_REQUEST\n  };\n};\n\nvar askQuestionSuccess = function askQuestionSuccess() {\n  return {\n    type: ASK_QUESTION_SUCCESS\n  };\n};\n\nvar askQuestionFailure = function askQuestionFailure() {\n  return {\n    type: ASK_QUESTION_FAILURE\n  };\n};\n\nvar addReplyRequest = function addReplyRequest() {\n  return {\n    type: ADD_REPLY_REQUEST\n  };\n};\n\nvar addReplySuccess = function addReplySuccess() {\n  return {\n    type: ADD_REPLY_SUCCESS\n  };\n};\n\nvar addReplyFailure = function addReplyFailure() {\n  return {\n    type: ADD_REPLY_FAILURE\n  };\n};\n\nvar editReply = function editReply(res) {\n  return {\n    type: EDIT_REPLY,\n    payload: res\n  };\n};\n\nexport var getQuestions = function getQuestions(search, pageNo, pageSize) {\n  search = typeof search === \"string\" ? search : \"\";\n  return function _callee(dispatch) {\n    var _response;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(getQuestionRequest());\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"\".concat(API_URL, \"question/search?search=\").concat(search)));\n\n          case 4:\n            _response = _context.sent;\n            _response = _response.data;\n            return _context.abrupt(\"return\", dispatch(getQuestionSuccess(_response)));\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            message.error(_context.t0.response.data.message);\n            return _context.abrupt(\"return\", dispatch(getQuestionFailure(_context.t0.message)));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]]);\n  };\n};\nexport var getQuestionById = function getQuestionById(id) {\n  console.log(\"hii\");\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n\n  if (!id) {\n    return function (dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n\n  return function _callee2(dispatch) {\n    var _response2;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(getCurrentQuestionReq());\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(\"\".concat(API_URL, \"question/search/\").concat(id)));\n\n          case 4:\n            _response2 = _context2.sent;\n            _response2 = _response2.data;\n            return _context2.abrupt(\"return\", dispatch(getCurrentQuestionSuccess(_response2)));\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            message.error(_context2.t0.response.data.message);\n            dispatch(getCurrentQuestionFailure(_context2.t0.message));\n            return _context2.abrupt(\"return\", response);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]]);\n  };\n};\nexport var voteQuestion = function voteQuestion(id, type, history) {\n  console.log(id, type);\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  var types = {\n    \"true\": \"upvote\",\n    \"false\": \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(\"\".concat(API_URL, \"question/\").concat(types[type], \"/\").concat(id), {}, getHeaders()).then(function (response) {\n      var res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    })[\"catch\"](function (error) {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        Router.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport var askQuestion = function askQuestion(data) {\n  data.title = typeof data.title === \"string\" && data.title.trim().length > 0 ? data.title.trim() : false;\n  data.description = typeof data.description === \"string\" && data.description.trim().length > 0 ? data.description.trim() : false;\n  data.tags = _Array$isArray(data.tags) && data.tags.length > 0 ? data.tags : false;\n\n  if (!(data.title && data.description && data.tags)) {\n    return function (dispatch) {\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  var body = {\n    title: data.title,\n    description: data.description,\n    tags: data.tags\n  };\n  return function _callee3(dispatch) {\n    var _response3;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            dispatch(askQuestionRequest());\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"question/ask\"), body, getHeaders()));\n\n          case 4:\n            _response3 = _context3.sent;\n            dispatch(askQuestionSuccess());\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(getQuestions()(dispatch));\n\n          case 8:\n            _context3.next = 15;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n            message.error(_context3.t0.response.data.message);\n            dispatch(askQuestionFailure());\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};\nexport var voteReply = function voteReply(id, type, history) {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  var types = {\n    \"true\": \"upvote\",\n    \"false\": \"downvote\"\n  };\n  return function _callee4(dispatch) {\n    var _response4;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"reply/\").concat(types[type], \"/\").concat(id), {}, getHeaders()));\n\n          case 3:\n            _response4 = _context4.sent;\n            _response4 = _response4.data;\n            dispatch(editReply(_response4));\n            _context4.next = 13;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n            if (_context4.t0.response.status === 401) {\n              Router.push(\"/login\");\n            }\n\n            message.error(_context4.t0.response.data.message);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 8]]);\n  };\n};\nexport var addReply = function addReply(data) {\n  data.text = typeof data.text === \"string\" && data.text.trim().length > 0 ? data.text.trim() : false;\n  data.questionId = typeof data.questionId === \"string\" && data.questionId.trim().length > 0 ? data.questionId.trim() : false;\n\n  if (!(data.text && data.questionId)) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\");\n      dispatch(askReplyFailure());\n    };\n  }\n\n  var body = {\n    text: data.text,\n    questionId: data.questionId\n  };\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            dispatch(addReplyRequest());\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"reply/\"), body, getHeaders()));\n\n          case 4:\n            message.success(\"Reply Added Successfully\");\n            dispatch(addReplySuccess());\n            getQuestionById(data.questionId)(dispatch);\n            _context5.next = 14;\n            break;\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(_context5.t0);\n            message.error(_context5.t0.response.data.message);\n            dispatch(addReplyFailure());\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 9]]);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}