{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { List, Comment, Avatar, Tooltip, Icon } from 'antd';\nimport { connect } from \"react-redux\";\nimport { voteReply } from \"../../redux/index\";\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nfunction Replies(props) {\n  const getActions = (votes, replyId) => {\n    const actions = [__jsx(\"span\", {\n      key: \"comment-basic-like\"\n    }, __jsx(Tooltip, {\n      title: \"Up Vote\",\n      onClick: () => props.voteReply(replyId, true, props.history)\n    }, __jsx(Icon, {\n      type: \"up\"\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      }\n    }, getUpVotesLength(votes))), __jsx(\"span\", {\n      key: \"comment-basic-dislike\"\n    }, __jsx(Tooltip, {\n      title: \"Down Vote\",\n      onClick: () => props.voteReply(replyId, false, props.history)\n    }, __jsx(Icon, {\n      type: \"down\"\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      }\n    }, getDownVotesLength(votes)))];\n    return actions;\n  };\n\n  const data = props.replies;\n  return __jsx(List, {\n    className: \"comment-list\",\n    header: `${data.length} replies`,\n    itemLayout: \"horizontal\",\n    dataSource: data,\n    renderItem: (item, index) => __jsx(\"li\", null, __jsx(Comment, {\n      actions: getActions(item.votes, item._id),\n      author: item.user.displayName,\n      avatar: __jsx(Avatar, {\n        style: {\n          backgroundColor: colorList[index % 4],\n          verticalAlign: \"middle\"\n        },\n        size: \"large\"\n      }, item.user.displayName[0].toUpperCase(), \" \"),\n      content: __jsx(ReactMarkdown, {\n        source: item.text\n      }),\n      datetime: moment(item.createdAt).calendar()\n    }))\n  });\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    voteReply: (id, type, history) => voteReply(id, type, history)(dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Replies);","map":null,"metadata":{},"sourceType":"module"}