{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { List, Button, Avatar, Tag, Icon } from 'antd';\nimport Reply from '../reply/Reply';\nimport ReactMarkdown from 'react-markdown';\nimport Replies from './Replies';\n\nconst IconText = ({\n  type,\n  text\n}) => __jsx(\"span\", null, __jsx(Icon, {\n  type: type,\n  style: {\n    marginRight: 8\n  }\n}), text);\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => __jsx(Tag, {\n    color: \"blue\"\n  }, tag));\n};\n\nfunction QuestionDescription(props) {\n  const {\n    item\n  } = props;\n  return __jsx(\"div\", null, __jsx(List.Item, {\n    key: item._id,\n    actions: [__jsx(Button, {\n      onClick: () => props.voteQuestion(item._id, true, props.history)\n    }, __jsx(IconText, {\n      type: \"up\",\n      text: getUpVotesLength(item.votes),\n      key: \"list-vertical-star-o\"\n    })), __jsx(Button, {\n      onClick: () => props.voteQuestion(item._id, false, props.history)\n    }, __jsx(IconText, {\n      type: \"down\",\n      text: getDownVotesLength(item.votes),\n      key: \"list-vertical-like-o\"\n    })), __jsx(Button, null, __jsx(IconText, {\n      type: \"message\",\n      text: item.replies.length,\n      key: \"list-vertical-message\"\n    })), __jsx(Reply, _extends({\n      questionId: item._id\n    }, props), \"Add Reply\")]\n  }, __jsx(List.Item.Meta, {\n    avatar: __jsx(Avatar, {\n      style: {\n        backgroundColor: \"#f56a00\",\n        verticalAlign: \"middle\"\n      },\n      size: \"large\"\n    }, item.creator.displayName[0].toUpperCase(), \" \"),\n    title: __jsx(\"a\", {\n      href: item.href\n    }, item.title),\n    description: renderTags(item.tags)\n  }), __jsx(ReactMarkdown, {\n    source: item.description\n  })), __jsx(Replies, _extends({\n    replies: item.replies\n  }, props)));\n}\n\nexport default QuestionDescription;","map":null,"metadata":{},"sourceType":"module"}