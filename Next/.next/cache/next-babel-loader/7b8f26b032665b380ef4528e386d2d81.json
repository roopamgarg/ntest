{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/index\";\nimport { Link } from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => __jsx(Tag, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, tag));\n};\n\nfunction Questions(props) {\n  //   useEffect(() => {\n  //     props.getQuestions(\"\");\n  //   }, []);\n  // const getInitialProps = ({store, isServer, pathname, query}) => {\n  //     store.dispatch({type: 'FOO', payload: 'foo'}); // component will be able to read from store's state when rendered\n  //     return {custom: 'custom'}; // you can pass some custom props to component from here\n  // }\n  const loadMore = () => {\n    props.getQuestions(\"\");\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      padding: \"0 10%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(List, {\n    className: \"demo-loadmore-list\",\n    loading: props.questionsLoader,\n    itemLayout: \"horizontal\",\n    loadMore: loadMore,\n    dataSource: props.questions,\n    renderItem: (item, index) => __jsx(List.Item, {\n      actions: [__jsx(Link, {\n        to: `/question/${item._id}`,\n        key: \"list-loadmore-edit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, getUpVotesLength(item.votes), \" Up Votes\"), __jsx(\"a\", {\n        key: \"list-loadmore-more\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, getDownVotesLength(item.votes), \" Down Votes\")],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(Skeleton, {\n      avatar: true,\n      title: false,\n      loading: props.questionsLoader,\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(List.Item.Meta, {\n      avatar: __jsx(Avatar, {\n        style: {\n          backgroundColor: colorList[index % 4],\n          verticalAlign: \"middle\"\n        },\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, item.creator.displayName[0].toUpperCase()),\n      title: __jsx(Link, {\n        style: {\n          fontSize: \"1.4rem\",\n          margin: \"0 0 0.5rem 0\",\n          display: \"inline-block\"\n        },\n        to: `/question/${item._id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, item.title),\n      description: renderTags(item.tags),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, item.creator.displayName))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      padding: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(AskQuestion, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), \"Ask Question\")));\n}\n\nQuestions.getInitialProps = ({\n  store,\n  isServer,\n  pathname,\n  query\n}) => {\n  console.log(store);\n};\n\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js"],"names":["React","useEffect","List","Button","Skeleton","Avatar","Tag","connect","getQuestions","Link","AskQuestion","colorList","getUpVotesLength","votes","upVotes","filter","type","length","getDownVotesLength","renderTags","tags","map","tag","Questions","props","loadMore","padding","questionsLoader","questions","item","index","_id","backgroundColor","verticalAlign","creator","displayName","toUpperCase","fontSize","margin","display","title","getInitialProps","store","isServer","pathname","query","console","log","mapStateToProps","state","question","mapDispatchToProps","dispatch","search","message"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/index\";\nimport { Link } from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = (tags) => {\n  return tags.map(tag =>  <Tag color=\"blue\">{tag}</Tag>)\n}\nfunction Questions(props) {\n//   useEffect(() => {\n//     props.getQuestions(\"\");\n//   }, []);\n// const getInitialProps = ({store, isServer, pathname, query}) => {\n//     store.dispatch({type: 'FOO', payload: 'foo'}); // component will be able to read from store's state when rendered\n//     return {custom: 'custom'}; // you can pass some custom props to component from here\n// }\n  const loadMore = () => {\n    props.getQuestions(\"\");\n  };\n\n  return (\n    <div style={{ padding: \"0 10%\" }}>\n      <List\n        className=\"demo-loadmore-list\"\n        loading={props.questionsLoader}\n        itemLayout=\"horizontal\"\n        loadMore={loadMore}\n        dataSource={props.questions}\n        renderItem={(item,index) => (\n          <List.Item\n            actions={[\n              <Link to={`/question/${item._id}`} key=\"list-loadmore-edit\">\n                {getUpVotesLength(item.votes)} Up Votes\n              </Link>,\n              <a key=\"list-loadmore-more\">\n                {getDownVotesLength(item.votes)} Down Votes\n              </a>\n            ]}\n          >\n            <Skeleton\n              avatar\n              title={false}\n              loading={props.questionsLoader}\n              active\n            >\n              <List.Item.Meta\n                avatar={\n                  <Avatar\n                    style={{\n                      backgroundColor: colorList[index % 4],\n                      verticalAlign: \"middle\"\n                    }}\n                    size=\"large\"\n                  >\n                    {item.creator.displayName[0].toUpperCase()}\n                  </Avatar>\n                }\n                title={<Link style={{fontSize:\"1.4rem\",margin:\"0 0 0.5rem 0\",display:\"inline-block\"}} to={`/question/${item._id}`}>{item.title}</Link>}\n                description={renderTags(item.tags)}\n              />\n              <div>{item.creator.displayName}</div>\n            </Skeleton>\n          </List.Item>\n        )}\n      />\n      <div style={{padding:\"2rem\"}}>\n      <AskQuestion {...props}>Ask Question</AskQuestion>\n      </div>\n    </div>\n  );\n}\n\nQuestions.getInitialProps = ({store, isServer, pathname, query}) => {\n  console.log(store)\n}\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}