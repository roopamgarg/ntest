{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, Component } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions as _getQuestions } from \"../redux/index\";\nimport Link from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nvar colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nvar getUpVotesLength = function getUpVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref) {\n    var type = _ref.type;\n    return type === true;\n  });\n  return upVotes.length;\n};\n\nvar getDownVotesLength = function getDownVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref2) {\n    var type = _ref2.type;\n    return type === false;\n  });\n  return upVotes.length;\n};\n\nvar renderTags = function renderTags(tags) {\n  return tags.map(function (tag) {\n    return __jsx(Tag, {\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, tag);\n  });\n};\n\nvar Questions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Questions, _Component);\n\n  function Questions() {\n    _classCallCheck(this, Questions);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Questions).apply(this, arguments));\n  }\n\n  _createClass(Questions, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      console.log(props);\n      return __jsx(Questions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref3) {\n      var store, isServer, pathname, query, action;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              store = _ref3.store, isServer = _ref3.isServer, pathname = _ref3.pathname, query = _ref3.query;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_getQuestions(\"\"));\n\n            case 3:\n              action = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(action(store.dispatch));\n\n            case 6:\n              return _context.abrupt(\"return\", {\n                questions: store.getState().questions\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return Questions;\n}(Component); // Questions.getInitialProps = ({store, isServer, pathname, query}) => {\n//   console.log(store)\n//   return store\n// }\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    questions: state.question.questions,\n    questionsLoader: state.question.questionsLoader\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getQuestions: function getQuestions(search, message) {\n      return dispatch(_getQuestions(search, message));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js"],"names":["React","useEffect","Component","List","Button","Skeleton","Avatar","Tag","connect","getQuestions","Link","AskQuestion","colorList","getUpVotesLength","votes","upVotes","filter","type","length","getDownVotesLength","renderTags","tags","map","tag","Questions","props","console","log","store","isServer","pathname","query","action","dispatch","questions","getState","mapStateToProps","state","question","questionsLoader","mapDispatchToProps","search","message"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyCC,GAAzC,QAAoD,MAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAY,IAAZA,aAAT,QAA6B,gBAA7B;AACA,OAAQC,IAAR,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,IAAMC,SAAS,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAlB;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAChC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,WAAcA,IAAI,KAAK,IAAvB;AAAA,GAAb,CAAhB;AACA,SAAOF,OAAO,CAACG,MAAf;AACD,CAHD;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAL,KAAK,EAAI;AAClC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WAAcA,IAAI,KAAK,KAAvB;AAAA,GAAb,CAAhB;AACA,SAAOF,OAAO,CAACG,MAAf;AACD,CAHD;;AAKA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI,EAAI;AACzB,SAAOA,IAAI,CAACC,GAAL,CAAS,UAAAC,GAAG;AAAA,WAAI,MAAC,GAAD;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBA,GAAnB,CAAJ;AAAA,GAAZ,CAAP;AACD,CAFD;;IAGMC,S;;;;;;;;;;;;;6BAUK;AACL,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF,aACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;;;;;;AAf+BG,cAAAA,K,SAAAA,K,EAAOC,Q,SAAAA,Q,EAAUC,Q,SAAAA,Q,EAAUC,K,SAAAA,K;;+CAElCtB,aAAY,CAAC,EAAD,C;;;AAA3BuB,cAAAA,M;;+CAEAA,MAAM,CAACJ,KAAK,CAACK,QAAP,C;;;+CAEL;AAACC,gBAAAA,SAAS,EAACN,KAAK,CAACO,QAAN,GAAiBD;AAA5B,e;;;;;;;;;;;;EAPWhC,S,GAmBxB;AACA;AACA;AACA;;;AACA,IAAMkC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCH,IAAAA,SAAS,EAAEG,KAAK,CAACC,QAAN,CAAeJ,SADM;AAEhCK,IAAAA,eAAe,EAAEF,KAAK,CAACC,QAAN,CAAeC;AAFA,GAAL;AAAA,CAA7B;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAP,QAAQ,EAAI;AACrC,SAAO;AACLxB,IAAAA,YAAY,EAAE,sBAACgC,MAAD,EAASC,OAAT;AAAA,aAAqBT,QAAQ,CAACxB,aAAY,CAACgC,MAAD,EAASC,OAAT,CAAb,CAA7B;AAAA;AADT,GAAP;AAGD,CAJD;;AAKA,eAAelC,OAAO,CAAC4B,eAAD,EAAiBI,kBAAjB,CAAP,CAA4ChB,SAA5C,CAAf","sourcesContent":["import React, { useEffect, Component } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/index\";\nimport  Link  from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => <Tag color=\"blue\">{tag}</Tag>);\n};\nclass Questions extends Component {\n    static async getInitialProps({store, isServer, pathname, query}) {\n  \n      const action = await getQuestions(\"\")\n\n      await action(store.dispatch)\n  \n      return {questions:store.getState().questions}\n\n      }\n  render() {\n      const props = this.props;\n      console.log(props)\n    return (\n      <Questions/>\n    );\n  }\n}\n\n// Questions.getInitialProps = ({store, isServer, pathname, query}) => {\n//   console.log(store)\n//   return store\n// }\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}