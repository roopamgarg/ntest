{"ast":null,"code":"import { GET_QUESTIONS_FAILURE, GET_QUESTIONS_REQUEST, GET_QUESTIONS_SUCCESS, GET_QUESTION_DESCRIPTION_FAILURE, GET_QUESTION_DESCRIPTION_REQUEST, GET_QUESTION_DESCRIPTION_SUCCESS, ASK_QUESTION_FAILURE, ASK_QUESTION_SUCCESS, ASK_QUESTION_REQUEST, ADD_REPLY_FAILURE, ADD_REPLY_SUCCESS, ADD_REPLY_REQUEST, EDIT_REPLY } from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport { getHeaders } from \"../helpers/getHeaders\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\n\nconst getQuestionRequest = () => ({\n  type: GET_QUESTIONS_REQUEST\n});\n\nconst getQuestionSuccess = res => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload: res\n});\n\nconst getQuestionFailure = err => ({\n  type: GET_QUESTIONS_FAILURE,\n  payload: err\n});\n\nconst getCurrentQuestionReq = () => ({\n  type: GET_QUESTION_DESCRIPTION_REQUEST\n});\n\nconst getCurrentQuestionSuccess = res => ({\n  type: GET_QUESTION_DESCRIPTION_SUCCESS,\n  payload: res\n});\n\nconst getCurrentQuestionFailure = err => ({\n  type: GET_QUESTION_DESCRIPTION_FAILURE,\n  payload: err\n});\n\nconst askQuestionRequest = () => ({\n  type: ASK_QUESTION_REQUEST\n});\n\nconst askQuestionSuccess = () => ({\n  type: ASK_QUESTION_SUCCESS\n});\n\nconst askQuestionFailure = () => ({\n  type: ASK_QUESTION_FAILURE\n});\n\nconst askReplyRequest = () => ({\n  type: ADD_REPLY_REQUEST\n});\n\nconst askReplySuccess = () => ({\n  type: ADD_REPLY_SUCCESS\n});\n\nconst askReplyFailure = () => ({\n  type: ADD_REPLY_FAILURE\n});\n\nconst editReply = res => ({\n  type: EDIT_REPLY,\n  payload: res\n});\n\nexport const getQuestions = (search, pageNo, pageSize) => {\n  search = typeof search === \"string\" ? search : \"\";\n  return function (dispatch) {\n    dispatch(getQuestionRequest());\n    axios.get(`${API_URL}question/search?search=${search}`).then(response => {\n      const res = response.data;\n      dispatch(getQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(getQuestionFailure(error.message));\n    });\n  };\n};\nexport const getQuestionById = id => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n\n  if (!id) {\n    return function (dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n\n  return function (dispatch) {\n    dispatch(getCurrentQuestionReq());\n    axios.get(`${API_URL}question/search/${id}`).then(response => {\n      const res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(getCurrentQuestionFailure(error.message));\n    });\n  };\n};\nexport const voteQuestion = (id, type, history) => {\n  console.log(id, type);\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(`${API_URL}question/${types[type]}/${id}`, {}, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        history.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport const askQuestion = data => {\n  data.title = typeof data.title === \"string\" && data.title.trim().length > 0 ? data.title.trim() : false;\n  data.description = typeof data.description === \"string\" && data.description.trim().length > 0 ? data.description.trim() : false;\n  data.tags = Array.isArray(data.tags) && data.tags.length > 0 ? data.tags : false;\n\n  if (!(data.title && data.description && data.tags)) {\n    return function (dispatch) {\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  const body = {\n    title: data.title,\n    description: data.description,\n    tags: data.tags\n  };\n  return function (dispatch) {\n    dispatch(askQuestionRequest());\n    axios.post(`${API_URL}question/ask`, body, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(askQuestionSuccess());\n      dispatch(getQuestions());\n    }).catch(error => {\n      message.error(error.response.data.message);\n      dispatch(askQuestionFailure());\n    });\n  };\n};\nexport const voteReply = (id, type, history) => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(`${API_URL}reply/${types[type]}/${id}`, {}, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(editReply(res));\n    }).catch(error => {\n      console.log(error.response);\n\n      if (error.response.status === 401) {\n        history.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport const addReply = data => {\n  data.text = typeof data.text === \"string\" && data.text.trim().length > 0 ? data.text.trim() : false;\n  data.questionId = typeof data.questionId === \"string\" && data.questionId.trim().length > 0 ? data.questionId.trim() : false;\n\n  if (!(data.text && data.questionId)) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\");\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  const body = {\n    text: data.text,\n    questionId: data.questionId\n  };\n  return function (dispatch) {\n    dispatch(addReplyRequest());\n    axios.post(`${API_URL}reply/`, body, getHeaders()).then(response => {\n      const res = response.data;\n      message.success(\"Reply Added Successfully\");\n      dispatch(addReplyS());\n      dispatch(getQuestionById(data.questionId));\n    }).catch(error => {\n      message.error(error.response.data.message);\n      dispatch(askQuestionFailure());\n    });\n  };\n};","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/question/questionActions.js"],"names":["GET_QUESTIONS_FAILURE","GET_QUESTIONS_REQUEST","GET_QUESTIONS_SUCCESS","GET_QUESTION_DESCRIPTION_FAILURE","GET_QUESTION_DESCRIPTION_REQUEST","GET_QUESTION_DESCRIPTION_SUCCESS","ASK_QUESTION_FAILURE","ASK_QUESTION_SUCCESS","ASK_QUESTION_REQUEST","ADD_REPLY_FAILURE","ADD_REPLY_SUCCESS","ADD_REPLY_REQUEST","EDIT_REPLY","message","API_URL","axios","getHeaders","React","Redirect","getQuestionRequest","type","getQuestionSuccess","res","payload","getQuestionFailure","err","getCurrentQuestionReq","getCurrentQuestionSuccess","getCurrentQuestionFailure","askQuestionRequest","askQuestionSuccess","askQuestionFailure","askReplyRequest","askReplySuccess","askReplyFailure","editReply","getQuestions","search","pageNo","pageSize","dispatch","get","then","response","data","catch","error","console","log","getQuestionById","id","length","voteQuestion","history","toString","types","true","false","post","status","push","askQuestion","title","trim","description","tags","Array","isArray","body","voteReply","addReply","text","questionId","addReplyRequest","success","addReplyS"],"mappings":"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","sourcesContent":["import {\n  GET_QUESTIONS_FAILURE,\n  GET_QUESTIONS_REQUEST,\n  GET_QUESTIONS_SUCCESS,\n  GET_QUESTION_DESCRIPTION_FAILURE,\n  GET_QUESTION_DESCRIPTION_REQUEST,\n  GET_QUESTION_DESCRIPTION_SUCCESS,\n  ASK_QUESTION_FAILURE,\n  ASK_QUESTION_SUCCESS,\n  ASK_QUESTION_REQUEST,\n  ADD_REPLY_FAILURE,\n  ADD_REPLY_SUCCESS,\n  ADD_REPLY_REQUEST,\n  EDIT_REPLY\n} from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport {getHeaders} from \"../helpers/getHeaders\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nconst getQuestionRequest = () => ({\n  type: GET_QUESTIONS_REQUEST\n});\nconst getQuestionSuccess = res => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload: res\n});\nconst getQuestionFailure = err => ({\n  type: GET_QUESTIONS_FAILURE,\n  payload: err\n});\n\nconst getCurrentQuestionReq = () => ({\n  type: GET_QUESTION_DESCRIPTION_REQUEST\n});\n\nconst getCurrentQuestionSuccess = res => ({\n  type: GET_QUESTION_DESCRIPTION_SUCCESS,\n  payload: res\n});\n\nconst getCurrentQuestionFailure = err => ({\n  type: GET_QUESTION_DESCRIPTION_FAILURE,\n  payload: err\n});\nconst askQuestionRequest = () => ({\n  type:ASK_QUESTION_REQUEST\n})\nconst askQuestionSuccess = () => ({\n  type:ASK_QUESTION_SUCCESS\n})\nconst askQuestionFailure = () => ({\n  type:ASK_QUESTION_FAILURE\n})\n\nconst askReplyRequest = () => ({\n  type:ADD_REPLY_REQUEST\n})\nconst askReplySuccess = () => ({\n  type:ADD_REPLY_SUCCESS\n})\nconst askReplyFailure = () => ({\n  type:ADD_REPLY_FAILURE\n})\nconst editReply = res => ({\n  type:EDIT_REPLY,\n  payload:res\n})\n\nexport const getQuestions = (search, pageNo, pageSize) => {\n  search = typeof search === \"string\" ? search : \"\";\n  return function(dispatch) {\n    dispatch(getQuestionRequest());\n    axios\n      .get(`${API_URL}question/search?search=${search}`)\n      .then(response => {\n        const res = response.data;\n        dispatch(getQuestionSuccess(res));\n      })\n      .catch(error => {\n        console.log(error);\n        message.error(error.response.data.message);\n        dispatch(getQuestionFailure(error.message));\n      });\n  };\n};\n\nexport const getQuestionById = id => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  if (!id) {\n    return function(dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n  return function(dispatch) {\n    dispatch(getCurrentQuestionReq());\n    axios\n      .get(`${API_URL}question/search/${id}`)\n      .then(response => {\n        const res = response.data;\n        dispatch(getCurrentQuestionSuccess(res));\n      })\n      .catch(error => {\n        console.log(error);\n        message.error(error.response.data.message);\n        dispatch(getCurrentQuestionFailure(error.message));\n      });\n  };\n};\n\nexport const voteQuestion = (id, type, history) => {\n  console.log(id,type)\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n  if (!id || !type) {\n    return function(dispatch) {\n      message.error(\"Missing Required Fields\");\n     // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function(dispatch) {\n    axios\n      .post(`${API_URL}question/${types[type]}/${id}`, {},getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(getCurrentQuestionSuccess(res));\n        \n      })\n      .catch(error => {\n        console.log(error);\n        if(error.response.status === 401){\n          history.push(\"/login\")\n         }\n        message.error(error.response.data.message);\n      });\n  };\n};\n\nexport const askQuestion = (data) => {\n  data.title = typeof data.title === \"string\" && data.title.trim().length > 0 ? data.title.trim() : false;\n  data.description = typeof data.description === \"string\" && data.description.trim().length > 0 ? data.description.trim() : false;\n  data.tags = Array.isArray(data.tags) && data.tags.length > 0 ? data.tags : false\n  if(!(data.title && data.description && data.tags)){\n    return function(dispatch){\n      dispatch(askQuestionFailure());\n    }\n  }\n  \n  const body = {\n    title:data.title,\n    description:data.description,\n    tags:data.tags\n  }\n  return function(dispatch) {\n    dispatch(askQuestionRequest());\n    axios\n      .post(`${API_URL}question/ask`,body,getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(askQuestionSuccess());\n        dispatch(getQuestions())\n      })\n      .catch(error => {\n\n        message.error(error.response.data.message);\n        dispatch(askQuestionFailure());\n      });\n  };\n};\n\n\nexport const voteReply = (id, type, history) => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n  if (!id || !type) {\n    return function(dispatch) {\n      message.error(\"Missing Required Fields\");\n     // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function(dispatch) {\n    axios\n      .post(`${API_URL}reply/${types[type]}/${id}`, {},getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(editReply(res));\n        \n      })\n      .catch(error => {\n        console.log(error.response);\n        if(error.response.status === 401){\n         history.push(\"/login\")\n        }\n        message.error(error.response.data.message);\n      });\n  };\n};\n\n\n\n\n\nexport const addReply = (data) => {\n  data.text = typeof data.text === \"string\" && data.text.trim().length > 0 ? data.text.trim() : false;\n  data.questionId = typeof data.questionId === \"string\" && data.questionId.trim().length > 0 ? data.questionId.trim() : false;\n\n  if(!(data.text && data.questionId)){\n    return function(dispatch){\n      message.error(\"Missing Required Fields\")\n      dispatch(askQuestionFailure());\n    }\n  }\n  \n  const body = {\n    text:data.text,\n    questionId:data.questionId\n  }\n  return function(dispatch) {\n    dispatch(addReplyRequest());\n    axios\n      .post(`${API_URL}reply/`,body,getHeaders())\n      .then(response => {\n        const res = response.data;\n        message.success(\"Reply Added Successfully\")\n        dispatch(addReplyS());\n        dispatch(getQuestionById(data.questionId))\n      })\n      .catch(error => {\n\n        message.error(error.response.data.message);\n        dispatch(askQuestionFailure());\n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}