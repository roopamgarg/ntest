{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questions/Questions.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { List, Skeleton, Avatar, Tag } from \"antd\";\nimport Link from \"next/link\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = (tags, keys) => {\n  return tags.map((tag, index) => __jsx(Tag, {\n    key: index,\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, tag));\n};\n\nfunction Questions(props) {\n  const {\n    item,\n    index\n  } = props;\n  return __jsx(List.Item, {\n    actions: [__jsx(\"a\", {\n      key: \"list-loadmore-more-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, getUpVotesLength(item.votes), \" Up Votes\"), __jsx(\"a\", {\n      key: \"list-loadmore-more\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, getDownVotesLength(item.votes), \" Down Votes\")],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(Skeleton, {\n    avatar: true,\n    title: false,\n    loading: props.questionsLoader,\n    active: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(List.Item.Meta, {\n    avatar: __jsx(Avatar, {\n      style: {\n        backgroundColor: colorList[index % 4],\n        verticalAlign: \"middle\"\n      },\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, item.creator.displayName[0].toUpperCase()),\n    title: __jsx(Link, {\n      href: `/question/${item._id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      style: {\n        fontSize: \"1.4rem\",\n        margin: \"0 0 0.5rem 0\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, item.title)),\n    description: renderTags(item.tags, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      pad\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, item.creator.displayName)));\n}\n\nexport default Questions;","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questions/Questions.js"],"names":["React","List","Skeleton","Avatar","Tag","Link","colorList","getUpVotesLength","votes","upVotes","filter","type","length","getDownVotesLength","renderTags","tags","keys","map","tag","index","Questions","props","item","questionsLoader","backgroundColor","verticalAlign","creator","displayName","toUpperCase","_id","fontSize","margin","display","title","pad"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { List, Skeleton, Avatar, Tag } from \"antd\";\n\nimport Link from \"next/link\";\n\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = (tags,keys) => {\n  return tags.map((tag,index) => <Tag key={index} color=\"blue\">{tag}</Tag>);\n};\nfunction Questions(props) {\n    const {item,index} = props\n    return (\n        <List.Item\n\n        actions={[\n          <a key=\"list-loadmore-more-1\">\n            {getUpVotesLength(item.votes)} Up Votes\n          </a>,\n          <a key=\"list-loadmore-more\">\n            {getDownVotesLength(item.votes)} Down Votes\n          </a>\n        ]}\n      >\n        <Skeleton\n          avatar\n          title={false}\n          loading={props.questionsLoader}\n          active\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar\n                style={{\n                  backgroundColor: colorList[index % 4],\n                  verticalAlign: \"middle\"\n                }}\n                size=\"large\"\n              >\n                {item.creator.displayName[0].toUpperCase()}\n              </Avatar>\n            }\n            title={\n              <Link href={`/question/${item._id}`}>\n                <a\n                  style={{\n                    fontSize: \"1.4rem\",\n                    margin: \"0 0 0.5rem 0\",\n                    display: \"inline-block\"\n                  }}\n                >\n                  {item.title}\n                </a>\n              </Link>\n            }\n            description={renderTags(item.tags,index)}\n          />\n          <div style={{pad}}>{item.creator.displayName}</div>\n        </Skeleton>\n      </List.Item>\n    \n    );\n}\n\nexport default Questions;"]},"metadata":{},"sourceType":"module"}