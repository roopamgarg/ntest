{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST } from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nvar loginUserRequest = function loginUserRequest() {\n  return {\n    type: LOGIN_USER_REQUEST\n  };\n};\n\nvar loginUserSuccess = function loginUserSuccess(res) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar loginUserFailure = function loginUserFailure(err) {\n  return {\n    type: LOGIN_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var logoutUser = function logoutUser() {\n  return {\n    type: LOGOUT_USER\n  };\n};\nexport var loginUser = function loginUser(data, message) {\n  var email = data.email,\n      password = data.password;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(email && password)) {\n    return function (dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function _callee(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(loginUserRequest());\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"user/login\"), data));\n\n          case 4:\n            res = _context.sent;\n            res = res.data;\n            Router.replace(\"/\");\n            return _context.abrupt(\"return\", dispatch(loginUserSuccess(res)));\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            message.error(_context.t0.response.data.message);\n            return _context.abrupt(\"return\", dispatch(loginUserFailure(_context.t0.message)));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};\n\nvar registerUserRequest = function registerUserRequest() {\n  return {\n    type: REGISTER_USER_REQUEST\n  };\n};\n\nvar registerUserSuccess = function registerUserSuccess(res) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar registerUserFailure = function registerUserFailure(err) {\n  return {\n    type: REGISTER_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var registerUser = function registerUser(data, history, message) {\n  var displayName = data.displayName,\n      email = data.email,\n      password = data.password;\n  displayName = typeof displayName === \"string\" && displayName.trim().length > 0 ? displayName.trim() : false;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(displayName && email && password)) {\n    return function (dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(registerUserRequest());\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"user/register\"), {\n              displayName: displayName,\n              email: email,\n              password: password\n            }));\n\n          case 4:\n            response = _context2.sent;\n            response = response.data;\n            dispatch(registerUserSuccess(response));\n            Router.push(\"/\");\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            message.error(_context2.t0.response.data.message);\n            dispatch(registerUserFailure(_context2.t0.message));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/user/userActions.js"],"names":["LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","REGISTER_USER_FAILURE","REGISTER_USER_SUCCESS","REGISTER_USER_REQUEST","API_URL","validateEmail","Router","axios","loginUserRequest","type","loginUserSuccess","res","payload","loginUserFailure","err","logoutUser","loginUser","data","message","email","password","trim","length","dispatch","error","registerUserFailure","post","replace","console","log","response","registerUserRequest","registerUserSuccess","registerUser","history","displayName","push"],"mappings":"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","sourcesContent":["import {\n  LOGIN_USER_REQUEST,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_FAILURE,\n  LOGOUT_USER,\n  REGISTER_USER_FAILURE,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_REQUEST\n} from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nconst loginUserRequest = () => ({\n  type: LOGIN_USER_REQUEST\n});\n\nconst loginUserSuccess = res => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: res\n});\n\nconst loginUserFailure = err => ({\n  type: LOGIN_USER_FAILURE,\n  payload: err\n});\n\nexport const logoutUser = () => {\n  return {\n    type: LOGOUT_USER\n  };\n};\n\nexport const loginUser = (data, message) => {\n  let { email, password } = data;\n\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(email && password)) {\n    return function(dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return async function(dispatch) {\n    try {\n      dispatch(loginUserRequest());\n      let res = await axios.post(`${API_URL}user/login`, data);\n      res = res.data;\n      Router.replace(\"/\");\n\n      return dispatch(loginUserSuccess(res));\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      return dispatch(loginUserFailure(error.message));\n    }\n  };\n};\n\nconst registerUserRequest = () => ({\n  type: REGISTER_USER_REQUEST\n});\n\nconst registerUserSuccess = res => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: res\n});\n\nconst registerUserFailure = err => ({\n  type: REGISTER_USER_FAILURE,\n  payload: err\n});\n\nexport const registerUser = (data, history, message) => {\n  let { displayName, email, password } = data;\n  displayName =\n    typeof displayName === \"string\" && displayName.trim().length > 0\n      ? displayName.trim()\n      : false;\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(displayName && email && password)) {\n    return function(dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return async function(dispatch) {\n    try {\n      dispatch(registerUserRequest());\n      let response = await axios.post(`${API_URL}user/register`, {\n        displayName,\n        email,\n        password\n      });\n\n      response = response.data;\n      dispatch(registerUserSuccess(response));\n\n      Router.push(\"/\");\n    } catch (error) {\n      message.error(error.response.data.message);\n      dispatch(registerUserFailure(error.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}