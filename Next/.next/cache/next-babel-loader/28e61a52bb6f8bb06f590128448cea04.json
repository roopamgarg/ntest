{"ast":null,"code":"import { GET_QUESTIONS_FAILURE, GET_QUESTIONS_REQUEST, GET_QUESTIONS_SUCCESS, GET_QUESTION_DESCRIPTION_FAILURE, GET_QUESTION_DESCRIPTION_REQUEST, GET_QUESTION_DESCRIPTION_SUCCESS, ASK_QUESTION_FAILURE, ASK_QUESTION_SUCCESS, ASK_QUESTION_REQUEST, ADD_REPLY_FAILURE, ADD_REPLY_SUCCESS, ADD_REPLY_REQUEST, EDIT_REPLY } from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport { getHeaders } from \"../helpers/getHeaders\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst getQuestionRequest = () => ({\n  type: GET_QUESTIONS_REQUEST\n});\n\nconst getQuestionSuccess = res => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload: res\n});\n\nconst getQuestionFailure = err => ({\n  type: GET_QUESTIONS_FAILURE,\n  payload: err\n});\n\nconst getCurrentQuestionReq = () => ({\n  type: GET_QUESTION_DESCRIPTION_REQUEST\n});\n\nconst getCurrentQuestionSuccess = res => ({\n  type: GET_QUESTION_DESCRIPTION_SUCCESS,\n  payload: res\n});\n\nconst getCurrentQuestionFailure = err => ({\n  type: GET_QUESTION_DESCRIPTION_FAILURE,\n  payload: err\n});\n\nconst askQuestionRequest = () => ({\n  type: ASK_QUESTION_REQUEST\n});\n\nconst askQuestionSuccess = () => ({\n  type: ASK_QUESTION_SUCCESS\n});\n\nconst askQuestionFailure = () => ({\n  type: ASK_QUESTION_FAILURE\n});\n\nconst addReplyRequest = () => ({\n  type: ADD_REPLY_REQUEST\n});\n\nconst addReplySuccess = () => ({\n  type: ADD_REPLY_SUCCESS\n});\n\nconst addReplyFailure = () => ({\n  type: ADD_REPLY_FAILURE\n});\n\nconst editReply = res => ({\n  type: EDIT_REPLY,\n  payload: res\n});\n\nexport const getQuestions = async (search, pageNo, pageSize) => {\n  console.log(\"hii\");\n  search = typeof search === \"string\" ? search : \"\";\n  return async function (dispatch) {\n    dispatch(getQuestionRequest());\n\n    try {\n      let response = await axios.get(`${API_URL}question/search?search=${search}`);\n      response = response.json();\n      return dispatch(getQuestionSuccess(res));\n    } catch (error) {\n      message.error(error.response.data.message);\n      return dispatch(getQuestionFailure(error.message));\n    }\n  };\n};\nexport const getQuestionById = id => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n\n  if (!id) {\n    return function (dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n\n  return function (dispatch) {\n    dispatch(getCurrentQuestionReq());\n    axios.get(`${API_URL}question/search/${id}`).then(response => {\n      const res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(getCurrentQuestionFailure(error.message));\n    });\n  };\n};\nexport const voteQuestion = (id, type, history) => {\n  console.log(id, type);\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(`${API_URL}question/${types[type]}/${id}`, {}, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        history.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport const askQuestion = data => {\n  data.title = typeof data.title === \"string\" && data.title.trim().length > 0 ? data.title.trim() : false;\n  data.description = typeof data.description === \"string\" && data.description.trim().length > 0 ? data.description.trim() : false;\n  data.tags = Array.isArray(data.tags) && data.tags.length > 0 ? data.tags : false;\n\n  if (!(data.title && data.description && data.tags)) {\n    return function (dispatch) {\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  const body = {\n    title: data.title,\n    description: data.description,\n    tags: data.tags\n  };\n  return function (dispatch) {\n    dispatch(askQuestionRequest());\n    axios.post(`${API_URL}question/ask`, body, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(askQuestionSuccess());\n      dispatch(getQuestions());\n    }).catch(error => {\n      message.error(error.response.data.message);\n      dispatch(askQuestionFailure());\n    });\n  };\n};\nexport const voteReply = (id, type, history) => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(`${API_URL}reply/${types[type]}/${id}`, {}, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(editReply(res));\n    }).catch(error => {\n      console.log(error.response);\n\n      if (error.response.status === 401) {\n        history.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport const addReply = data => {\n  data.text = typeof data.text === \"string\" && data.text.trim().length > 0 ? data.text.trim() : false;\n  data.questionId = typeof data.questionId === \"string\" && data.questionId.trim().length > 0 ? data.questionId.trim() : false;\n\n  if (!(data.text && data.questionId)) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\");\n      dispatch(askReplyFailure());\n    };\n  }\n\n  const body = {\n    text: data.text,\n    questionId: data.questionId\n  };\n  return function (dispatch) {\n    dispatch(addReplyRequest());\n    axios.post(`${API_URL}reply/`, body, getHeaders()).then(response => {\n      const res = response.data;\n      message.success(\"Reply Added Successfully\");\n      dispatch(addReplySuccess());\n      dispatch(getQuestionById(data.questionId));\n    }).catch(error => {\n      message.error(error.response.data.message);\n      dispatch(addReplyFailure());\n    });\n  };\n};","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/question/questionActions.js"],"names":["GET_QUESTIONS_FAILURE","GET_QUESTIONS_REQUEST","GET_QUESTIONS_SUCCESS","GET_QUESTION_DESCRIPTION_FAILURE","GET_QUESTION_DESCRIPTION_REQUEST","GET_QUESTION_DESCRIPTION_SUCCESS","ASK_QUESTION_FAILURE","ASK_QUESTION_SUCCESS","ASK_QUESTION_REQUEST","ADD_REPLY_FAILURE","ADD_REPLY_SUCCESS","ADD_REPLY_REQUEST","EDIT_REPLY","message","API_URL","axios","getHeaders","React","Redirect","getQuestionRequest","type","getQuestionSuccess","res","payload","getQuestionFailure","err","getCurrentQuestionReq","getCurrentQuestionSuccess","getCurrentQuestionFailure","askQuestionRequest","askQuestionSuccess","askQuestionFailure","addReplyRequest","addReplySuccess","addReplyFailure","editReply","getQuestions","search","pageNo","pageSize","console","log","dispatch","response","get","json","error","data","getQuestionById","id","length","then","catch","voteQuestion","history","toString","types","true","false","post","status","push","askQuestion","title","trim","description","tags","Array","isArray","body","voteReply","addReply","text","questionId","askReplyFailure","success"],"mappings":"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","sourcesContent":["import {\n  GET_QUESTIONS_FAILURE,\n  GET_QUESTIONS_REQUEST,\n  GET_QUESTIONS_SUCCESS,\n  GET_QUESTION_DESCRIPTION_FAILURE,\n  GET_QUESTION_DESCRIPTION_REQUEST,\n  GET_QUESTION_DESCRIPTION_SUCCESS,\n  ASK_QUESTION_FAILURE,\n  ASK_QUESTION_SUCCESS,\n  ASK_QUESTION_REQUEST,\n  ADD_REPLY_FAILURE,\n  ADD_REPLY_SUCCESS,\n  ADD_REPLY_REQUEST,\n  EDIT_REPLY\n} from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport { getHeaders } from \"../helpers/getHeaders\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nconst getQuestionRequest = () => ({\n  type: GET_QUESTIONS_REQUEST\n});\nconst getQuestionSuccess = res => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload: res\n});\nconst getQuestionFailure = err => ({\n  type: GET_QUESTIONS_FAILURE,\n  payload: err\n});\n\nconst getCurrentQuestionReq = () => ({\n  type: GET_QUESTION_DESCRIPTION_REQUEST\n});\n\nconst getCurrentQuestionSuccess = res => ({\n  type: GET_QUESTION_DESCRIPTION_SUCCESS,\n  payload: res\n});\n\nconst getCurrentQuestionFailure = err => ({\n  type: GET_QUESTION_DESCRIPTION_FAILURE,\n  payload: err\n});\nconst askQuestionRequest = () => ({\n  type: ASK_QUESTION_REQUEST\n});\nconst askQuestionSuccess = () => ({\n  type: ASK_QUESTION_SUCCESS\n});\nconst askQuestionFailure = () => ({\n  type: ASK_QUESTION_FAILURE\n});\n\nconst addReplyRequest = () => ({\n  type: ADD_REPLY_REQUEST\n});\nconst addReplySuccess = () => ({\n  type: ADD_REPLY_SUCCESS\n});\nconst addReplyFailure = () => ({\n  type: ADD_REPLY_FAILURE\n});\nconst editReply = res => ({\n  type: EDIT_REPLY,\n  payload: res\n});\n\nexport const getQuestions = async (search, pageNo, pageSize) => {\n  console.log(\"hii\");\n  search = typeof search === \"string\" ? search : \"\";\n  return async function(dispatch) {\n    dispatch(getQuestionRequest());\n    try {\n      let response = await axios.get(\n        `${API_URL}question/search?search=${search}`\n      );\n      response = response.json();\n      return dispatch(getQuestionSuccess(res));\n    } catch (error) {\n      message.error(error.response.data.message);\n      return dispatch(getQuestionFailure(error.message));\n    }\n  };\n};\n\nexport const getQuestionById = id => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  if (!id) {\n    return function(dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n  return function(dispatch) {\n    dispatch(getCurrentQuestionReq());\n    axios\n      .get(`${API_URL}question/search/${id}`)\n      .then(response => {\n        const res = response.data;\n        dispatch(getCurrentQuestionSuccess(res));\n      })\n      .catch(error => {\n        console.log(error);\n        message.error(error.response.data.message);\n        dispatch(getCurrentQuestionFailure(error.message));\n      });\n  };\n};\n\nexport const voteQuestion = (id, type, history) => {\n  console.log(id, type);\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n  if (!id || !type) {\n    return function(dispatch) {\n      message.error(\"Missing Required Fields\");\n      // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function(dispatch) {\n    axios\n      .post(`${API_URL}question/${types[type]}/${id}`, {}, getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(getCurrentQuestionSuccess(res));\n      })\n      .catch(error => {\n        console.log(error);\n        if (error.response.status === 401) {\n          history.push(\"/login\");\n        }\n        message.error(error.response.data.message);\n      });\n  };\n};\n\nexport const askQuestion = data => {\n  data.title =\n    typeof data.title === \"string\" && data.title.trim().length > 0\n      ? data.title.trim()\n      : false;\n  data.description =\n    typeof data.description === \"string\" && data.description.trim().length > 0\n      ? data.description.trim()\n      : false;\n  data.tags =\n    Array.isArray(data.tags) && data.tags.length > 0 ? data.tags : false;\n  if (!(data.title && data.description && data.tags)) {\n    return function(dispatch) {\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  const body = {\n    title: data.title,\n    description: data.description,\n    tags: data.tags\n  };\n  return function(dispatch) {\n    dispatch(askQuestionRequest());\n    axios\n      .post(`${API_URL}question/ask`, body, getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(askQuestionSuccess());\n        dispatch(getQuestions());\n      })\n      .catch(error => {\n        message.error(error.response.data.message);\n        dispatch(askQuestionFailure());\n      });\n  };\n};\n\nexport const voteReply = (id, type, history) => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n  if (!id || !type) {\n    return function(dispatch) {\n      message.error(\"Missing Required Fields\");\n      // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function(dispatch) {\n    axios\n      .post(`${API_URL}reply/${types[type]}/${id}`, {}, getHeaders())\n      .then(response => {\n        const res = response.data;\n        dispatch(editReply(res));\n      })\n      .catch(error => {\n        console.log(error.response);\n        if (error.response.status === 401) {\n          history.push(\"/login\");\n        }\n        message.error(error.response.data.message);\n      });\n  };\n};\n\nexport const addReply = data => {\n  data.text =\n    typeof data.text === \"string\" && data.text.trim().length > 0\n      ? data.text.trim()\n      : false;\n  data.questionId =\n    typeof data.questionId === \"string\" && data.questionId.trim().length > 0\n      ? data.questionId.trim()\n      : false;\n\n  if (!(data.text && data.questionId)) {\n    return function(dispatch) {\n      message.error(\"Missing Required Fields\");\n      dispatch(askReplyFailure());\n    };\n  }\n\n  const body = {\n    text: data.text,\n    questionId: data.questionId\n  };\n  return function(dispatch) {\n    dispatch(addReplyRequest());\n    axios\n      .post(`${API_URL}reply/`, body, getHeaders())\n      .then(response => {\n        const res = response.data;\n        message.success(\"Reply Added Successfully\");\n        dispatch(addReplySuccess());\n        dispatch(getQuestionById(data.questionId));\n      })\n      .catch(error => {\n        message.error(error.response.data.message);\n        dispatch(addReplyFailure());\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}