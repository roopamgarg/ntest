{"ast":null,"code":"import { GET_QUESTIONS_FAILURE, GET_QUESTIONS_REQUEST, GET_QUESTIONS_SUCCESS, GET_QUESTION_DESCRIPTION_FAILURE, GET_QUESTION_DESCRIPTION_REQUEST, GET_QUESTION_DESCRIPTION_SUCCESS, ASK_QUESTION_FAILURE, ASK_QUESTION_SUCCESS, ASK_QUESTION_REQUEST, ADD_REPLY_FAILURE, ADD_REPLY_SUCCESS, ADD_REPLY_REQUEST, EDIT_REPLY } from \"./questionTypes\";\nimport { message } from \"antd\";\nimport API_URL from \"../helpers/API_URL\";\nimport axios from \"axios\";\nimport { getHeaders } from \"../helpers/getHeaders\";\nimport React from \"react\";\nimport Router from \"next/router\";\n\nconst getQuestionRequest = () => ({\n  type: GET_QUESTIONS_REQUEST\n});\n\nconst getQuestionSuccess = res => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload: res\n});\n\nconst getQuestionFailure = err => ({\n  type: GET_QUESTIONS_FAILURE,\n  payload: err\n});\n\nconst getCurrentQuestionReq = () => ({\n  type: GET_QUESTION_DESCRIPTION_REQUEST\n});\n\nconst getCurrentQuestionSuccess = res => ({\n  type: GET_QUESTION_DESCRIPTION_SUCCESS,\n  payload: res\n});\n\nconst getCurrentQuestionFailure = err => ({\n  type: GET_QUESTION_DESCRIPTION_FAILURE,\n  payload: err\n});\n\nconst askQuestionRequest = () => ({\n  type: ASK_QUESTION_REQUEST\n});\n\nconst askQuestionSuccess = () => ({\n  type: ASK_QUESTION_SUCCESS\n});\n\nconst askQuestionFailure = () => ({\n  type: ASK_QUESTION_FAILURE\n});\n\nconst addReplyRequest = () => ({\n  type: ADD_REPLY_REQUEST\n});\n\nconst addReplySuccess = () => ({\n  type: ADD_REPLY_SUCCESS\n});\n\nconst addReplyFailure = () => ({\n  type: ADD_REPLY_FAILURE\n});\n\nconst editReply = res => ({\n  type: EDIT_REPLY,\n  payload: res\n});\n\nexport const getQuestions = (search, pageNo, pageSize) => {\n  search = typeof search === \"string\" ? search : \"\";\n  return async function (dispatch) {\n    dispatch(getQuestionRequest());\n\n    try {\n      let response = await axios.get(`${API_URL}question/search?search=${search}`);\n      response = response.data;\n      return dispatch(getQuestionSuccess(response));\n    } catch (error) {\n      message.error(error.response.data.message);\n      return dispatch(getQuestionFailure(error.message));\n    }\n  };\n};\nexport const getQuestionById = id => {\n  console.log(\"hii\");\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n\n  if (!id) {\n    return function (dispatch) {\n      message.error(\"Invalid ID\");\n      dispatch(getCurrentQuestionFailure(\"Invalid ID\"));\n    };\n  }\n\n  return async function (dispatch) {\n    try {\n      dispatch(getCurrentQuestionReq());\n      let response = await axios.get(`${API_URL}question/search/${id}`);\n      response = response.data;\n      return dispatch(getCurrentQuestionSuccess(response));\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(getCurrentQuestionFailure(error.message));\n      return response;\n    }\n  };\n};\nexport const voteQuestion = (id, type, history) => {\n  console.log(id, type);\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return function (dispatch) {\n    axios.post(`${API_URL}question/${types[type]}/${id}`, {}, getHeaders()).then(response => {\n      const res = response.data;\n      dispatch(getCurrentQuestionSuccess(res));\n    }).catch(error => {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        Router.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    });\n  };\n};\nexport const askQuestion = data => {\n  data.title = typeof data.title === \"string\" && data.title.trim().length > 0 ? data.title.trim() : false;\n  data.description = typeof data.description === \"string\" && data.description.trim().length > 0 ? data.description.trim() : false;\n  data.tags = Array.isArray(data.tags) && data.tags.length > 0 ? data.tags : false;\n\n  if (!(data.title && data.description && data.tags)) {\n    return function (dispatch) {\n      dispatch(askQuestionFailure());\n    };\n  }\n\n  const body = {\n    title: data.title,\n    description: data.description,\n    tags: data.tags\n  };\n  return async function (dispatch) {\n    try {\n      dispatch(askQuestionRequest());\n      const response = await axios.post(`${API_URL}question/ask`, body, getHeaders());\n      dispatch(askQuestionSuccess());\n      await getQuestions()(dispatch);\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(askQuestionFailure());\n    }\n  };\n};\nexport const voteReply = (id, type, history) => {\n  id = typeof id === \"string\" && id.length > 0 ? id : false;\n  type = typeof type === \"boolean\" ? type.toString() : false;\n\n  if (!id || !type) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\"); // dispatch(getCurrentQuestionFailure(\"Missing Required Fields\"));\n    };\n  }\n\n  const types = {\n    true: \"upvote\",\n    false: \"downvote\"\n  };\n  return async function (dispatch) {\n    try {\n      let response = await axios.post(`${API_URL}reply/${types[type]}/${id}`, {}, getHeaders());\n      response = response.data;\n      dispatch(editReply(response));\n    } catch (error) {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        Router.push(\"/login\");\n      }\n\n      message.error(error.response.data.message);\n    }\n  };\n};\nexport const addReply = data => {\n  data.text = typeof data.text === \"string\" && data.text.trim().length > 0 ? data.text.trim() : false;\n  data.questionId = typeof data.questionId === \"string\" && data.questionId.trim().length > 0 ? data.questionId.trim() : false;\n\n  if (!(data.text && data.questionId)) {\n    return function (dispatch) {\n      message.error(\"Missing Required Fields\");\n      dispatch(askReplyFailure());\n    };\n  }\n\n  const body = {\n    text: data.text,\n    questionId: data.questionId\n  };\n  return async function (dispatch) {\n    try {\n      dispatch(addReplyRequest());\n      await axios.post(`${API_URL}reply/`, body, getHeaders());\n      message.success(\"Reply Added Successfully\");\n      dispatch(addReplySuccess());\n      getQuestionById(data.questionId)(dispatch);\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(addReplyFailure());\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}