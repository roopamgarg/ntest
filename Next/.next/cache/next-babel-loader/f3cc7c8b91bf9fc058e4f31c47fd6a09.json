{"ast":null,"code":"import { LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST } from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nconst loginUserRequest = () => ({\n  type: LOGIN_USER_REQUEST\n});\n\nconst loginUserSuccess = res => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: res\n});\n\nconst loginUserFailure = err => ({\n  type: LOGIN_USER_FAILURE,\n  payload: err\n});\n\nexport const logoutUser = () => {\n  Router.push(\"/\");\n  return {\n    type: LOGOUT_USER\n  };\n};\nexport const loginUser = (data, message) => {\n  let {\n    email,\n    password\n  } = data;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(email && password)) {\n    return function (dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return async function (dispatch) {\n    try {\n      dispatch(loginUserRequest());\n      let res = await axios.post(`${API_URL}user/login`, data);\n      res = res.data;\n      Router.replace(\"/\");\n      dispatch(loginUserSuccess(res));\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(loginUserFailure(error.message));\n    }\n  };\n};\n\nconst registerUserRequest = () => ({\n  type: REGISTER_USER_REQUEST\n});\n\nconst registerUserSuccess = res => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: res\n});\n\nconst registerUserFailure = err => ({\n  type: REGISTER_USER_FAILURE,\n  payload: err\n});\n\nexport const registerUser = (data, history, message) => {\n  let {\n    displayName,\n    email,\n    password\n  } = data;\n  displayName = typeof displayName === \"string\" && displayName.trim().length > 0 ? displayName.trim() : false;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(displayName && email && password)) {\n    return function (dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return async function (dispatch) {\n    try {\n      dispatch(registerUserRequest());\n      let response = await axios.post(`${API_URL}user/register`, {\n        displayName,\n        email,\n        password\n      });\n      response = response.data;\n      dispatch(registerUserSuccess(response));\n      Router.push(\"/\");\n    } catch (error) {\n      message.error(error.response.data.message);\n      dispatch(registerUserFailure(error.message));\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}