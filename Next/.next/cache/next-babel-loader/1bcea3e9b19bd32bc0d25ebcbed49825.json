{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/[id].js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestionById, voteQuestion } from \"../redux/index\";\nimport Link from \"next/link\";\nimport { List, Icon, Avatar, Button, Tag } from \"antd\";\nimport Replies from \"../components/questionDescription/Replies\";\nimport Reply from \"../components/reply/Reply\";\nimport ReactMarkdown from \"react-markdown\";\nimport Router from 'next/router';\n\nconst IconText = ({\n  type,\n  text\n}) => __jsx(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(Icon, {\n  type: type,\n  style: {\n    marginRight: 8\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), text);\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => __jsx(Tag, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, tag));\n};\n\nclass QuestionDescription extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"render\", () => {\n      const props = this.props;\n      console.log(props.currentQuestion);\n      return __jsx(List, {\n        itemLayout: \"vertical\",\n        size: \"large\",\n        style: {\n          padding: \"0 10%\"\n        },\n        dataSource: props.currentQuestion._id ? [props.currentQuestion] : [],\n        loading: props.currentQuestionLoader,\n        renderItem: item => __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, __jsx(List.Item, {\n          key: item._id,\n          actions: [__jsx(Button, {\n            onClick: () => props.voteQuestion(item._id, true, props.history),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, __jsx(IconText, {\n            type: \"up\",\n            text: getUpVotesLength(item.votes),\n            key: \"list-vertical-star-o\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          })), __jsx(Button, {\n            onClick: () => props.voteQuestion(item._id, false, props.history),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, __jsx(IconText, {\n            type: \"down\",\n            text: getDownVotesLength(item.votes),\n            key: \"list-vertical-like-o\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          })), __jsx(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, __jsx(IconText, {\n            type: \"message\",\n            text: item.replies.length,\n            key: \"list-vertical-message\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          })), __jsx(Reply, _extends({\n            questionId: item._id\n          }, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }), \"Add Reply\")],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, __jsx(List.Item.Meta, {\n          avatar: __jsx(Avatar, {\n            style: {\n              backgroundColor: \"#f56a00\",\n              verticalAlign: \"middle\"\n            },\n            size: \"large\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, item.creator.displayName[0].toUpperCase(), \" \"),\n          title: __jsx(\"a\", {\n            href: item.href,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, item.title),\n          description: renderTags(item.tags),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }), __jsx(ReactMarkdown, {\n          source: item.description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        })), __jsx(Replies, _extends({\n          replies: item.replies\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      });\n    });\n  }\n\n  // useEffect(() => {\n  //   props.getQuestionById(props.match.params.id);\n  // }, []);\n  // componentDidMount = () => {\n  //   this.props.getQuestionById(Router.params.id);\n  // }\n  static async getInitialProps({\n    store,\n    isServer,\n    pathname,\n    query\n  }) {\n    try {\n      const action = await getQuestionById(query.id);\n      await action(store.dispatch);\n      console.log(store.getState());\n      return {\n        currentQuestion: store.getState().currentQuestion\n      };\n    } catch (err) {\n      return {};\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentQuestion: state.question.currentQuestion,\n  currentQuestionLoader: state.question.currentQuestionLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: id => getQuestionById(id)(dispatch),\n    voteQuestion: (id, type, history) => voteQuestion(id, type, history)(dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionDescription);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/[id].js"],"names":["React","useState","useEffect","Component","connect","getQuestionById","voteQuestion","Link","List","Icon","Avatar","Button","Tag","Replies","Reply","ReactMarkdown","Router","IconText","type","text","marginRight","getUpVotesLength","votes","upVotes","filter","length","getDownVotesLength","renderTags","tags","map","tag","QuestionDescription","props","console","log","currentQuestion","padding","_id","currentQuestionLoader","item","history","replies","backgroundColor","verticalAlign","creator","displayName","toUpperCase","href","title","description","getInitialProps","store","isServer","pathname","query","action","id","dispatch","getState","err","mapStateToProps","state","question","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestionById, voteQuestion } from \"../redux/index\";\nimport  Link  from \"next/link\";\nimport { List, Icon, Avatar, Button, Tag } from \"antd\";\nimport Replies from \"../components/questionDescription/Replies\";\nimport Reply from \"../components/reply/Reply\";\nimport ReactMarkdown from \"react-markdown\";\nimport Router from 'next/router'\nconst IconText = ({ type, text }) => (\n  <span>\n    <Icon type={type} style={{ marginRight: 8 }} />\n    {text}\n  </span>\n);\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === false);\n  return upVotes.length;\n};\nconst renderTags = (tags) => {\n  return tags.map(tag =>  <Tag color=\"blue\">{tag}</Tag>)\n}\nclass QuestionDescription extends Component {\n  // useEffect(() => {\n  //   props.getQuestionById(props.match.params.id);\n  // }, []);\n  // componentDidMount = () => {\n  //   this.props.getQuestionById(Router.params.id);\n  // }\n  static async getInitialProps({ store, isServer, pathname, query }) {\n    try {\n\n      const action = await getQuestionById(query.id);\n\n      await action(store.dispatch);\n      console.log(store.getState())\n      return { currentQuestion: store.getState().currentQuestion };\n    } catch (err) {\n      return {};\n    }\n  }\n  render = () =>{\n  const props = this.props\n  console.log(props.currentQuestion);\n  return (\n    <List\n      itemLayout=\"vertical\"\n      size=\"large\"\n      style={{ padding: \"0 10%\" }}\n      dataSource={props.currentQuestion._id ? [props.currentQuestion] : []}\n      loading={props.currentQuestionLoader}\n      renderItem={item => (\n        <div>\n          <List.Item\n            key={item._id}\n            actions={[\n              <Button    onClick={() => props.voteQuestion(item._id, true, props.history)}>\n              \n                <IconText\n                  type=\"up\"\n                 \n                  text={getUpVotesLength(item.votes)}\n                  key=\"list-vertical-star-o\"\n                />\n              </Button>,\n              <Button   onClick={() => props.voteQuestion(item._id, false,props.history)}>\n                <IconText\n                  type=\"down\"\n     \n                  text={getDownVotesLength(item.votes)}\n                  key=\"list-vertical-like-o\"\n                />\n              </Button>,\n              <Button>\n                <IconText\n                  type=\"message\"\n                  text={item.replies.length}\n                  key=\"list-vertical-message\"\n                />\n              </Button>,\n              <Reply questionId={item._id} {...props}>Add Reply</Reply>\n            ]}\n          >\n            <List.Item.Meta\n              avatar={\n                <Avatar style={{\n                  backgroundColor: \"#f56a00\",\n                  verticalAlign: \"middle\"\n                }}\n                size=\"large\" >{item.creator.displayName[0].toUpperCase()} </Avatar>\n              }\n              title={<a href={item.href}>{item.title}</a>}\n              description={renderTags(item.tags)}\n            />\n            <ReactMarkdown source={item.description}/>\n          </List.Item>\n          <Replies replies={item.replies} {...props} />\n          \n\n        </div>\n      )}\n    />\n\n  );\n}\n}\nconst mapStateToProps = state => ({\n  currentQuestion: state.question.currentQuestion,\n  currentQuestionLoader: state.question.currentQuestionLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: id => getQuestionById(id)(dispatch),\n    voteQuestion: (id, type, history) => voteQuestion(id, type, history)(dispatch)\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionDescription);\n"]},"metadata":{},"sourceType":"module"}