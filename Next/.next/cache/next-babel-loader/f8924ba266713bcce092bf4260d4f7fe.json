{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Button, Modal, Form, Input, Icon, Select } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { connect } from \"react-redux\";\nimport { askQuestion as _askQuestion } from '../../redux/index';\nimport ReactMarkdown from \"react-markdown\";\nimport cookie from \"react-cookies\";\nimport Router from 'next/router';\n\nfunction AskQuestion(props) {\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      title = _useState3[0],\n      setTitle = _useState3[1];\n\n  var _useState4 = useState([]),\n      tags = _useState4[0],\n      setTags = _useState4[1];\n\n  var showModal = function showModal() {\n    if (!cookie.load('token')) {\n      Router.push('/login');\n      return setVisible(false);\n    }\n\n    setVisible(true);\n  };\n\n  var handleOk = function handleOk(e) {\n    return _regeneratorRuntime.async(function handleOk$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(e);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(props.askQuestion({\n              title: title,\n              description: description,\n              tags: tags\n            }));\n\n          case 3:\n            setDescription(\"\");\n            setTitle(\"\");\n            setTags([]);\n            setVisible(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var handleCancel = function handleCancel(e) {\n    console.log(e);\n    setVisible(false);\n  };\n\n  var handleTagChange = function handleTagChange(val) {\n    setTags(val);\n  };\n\n  return __jsx(\"div\", null, __jsx(Button, {\n    type: \"primary\",\n    onClick: showModal\n  }, props.children), __jsx(Modal, {\n    title: \"Ask A Question\",\n    visible: visible,\n    onOk: handleOk,\n    onCancel: handleCancel\n  }, __jsx(Form, {\n    className: \"login-form\"\n  }, __jsx(Form.Item, null, __jsx(Input, {\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    placeholder: \"Title\"\n  })), __jsx(ReactMarkdown, {\n    source: description\n  }), __jsx(Form.Item, null, __jsx(TextArea, {\n    placeholder: \"Enter Your Question Description( Mark Down Supported)\",\n    autoSize: {\n      minRows: 2\n    },\n    value: description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    }\n  })), __jsx(Form.Item, null, __jsx(Select, {\n    mode: \"tags\",\n    style: {\n      width: \"100%\"\n    },\n    tokenSeparators: [\",\"],\n    value: tags,\n    onChange: handleTagChange\n  })))));\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    askQuestion: function askQuestion(data) {\n      return _askQuestion(data)(dispatch);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AskQuestion);","map":null,"metadata":{},"sourceType":"module"}