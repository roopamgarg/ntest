{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { List, Button, Avatar, Tag, Icon } from 'antd';\nimport Reply from '../reply/Reply';\nimport ReactMarkdown from 'react-markdown';\nimport Replies from './Replies';\n\nvar IconText = function IconText(_ref) {\n  var type = _ref.type,\n      text = _ref.text;\n  return __jsx(\"span\", null, __jsx(Icon, {\n    type: type,\n    style: {\n      marginRight: 8\n    }\n  }), text);\n};\n\nvar getUpVotesLength = function getUpVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref2) {\n    var type = _ref2.type;\n    return type === true;\n  });\n  return upVotes.length;\n};\n\nvar getDownVotesLength = function getDownVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref3) {\n    var type = _ref3.type;\n    return type === false;\n  });\n  return upVotes.length;\n};\n\nvar renderTags = function renderTags(tags) {\n  return tags.map(function (tag) {\n    return __jsx(Tag, {\n      color: \"blue\"\n    }, tag);\n  });\n};\n\nfunction QuestionDescription(props) {\n  var item = props.item;\n  return __jsx(\"div\", null, __jsx(List.Item, {\n    key: item._id,\n    actions: [__jsx(Button, {\n      onClick: function onClick() {\n        return props.voteQuestion(item._id, true, props.history);\n      }\n    }, __jsx(IconText, {\n      type: \"up\",\n      text: getUpVotesLength(item.votes),\n      key: \"list-vertical-star-o\"\n    })), __jsx(Button, {\n      onClick: function onClick() {\n        return props.voteQuestion(item._id, false, props.history);\n      }\n    }, __jsx(IconText, {\n      type: \"down\",\n      text: getDownVotesLength(item.votes),\n      key: \"list-vertical-like-o\"\n    })), __jsx(Button, null, __jsx(IconText, {\n      type: \"message\",\n      text: item.replies.length,\n      key: \"list-vertical-message\"\n    })), __jsx(Reply, _extends({\n      questionId: item._id\n    }, props), \"Add Reply\")]\n  }, __jsx(List.Item.Meta, {\n    avatar: __jsx(Avatar, {\n      style: {\n        backgroundColor: \"#f56a00\",\n        verticalAlign: \"middle\"\n      },\n      size: \"large\"\n    }, item.creator.displayName[0].toUpperCase(), \" \"),\n    title: __jsx(\"a\", {\n      href: item.href\n    }, item.title),\n    description: renderTags(item.tags)\n  }), __jsx(ReactMarkdown, {\n    source: item.description\n  })), __jsx(Replies, _extends({\n    replies: item.replies\n  }, props)));\n}\n\nexport default QuestionDescription;","map":null,"metadata":{},"sourceType":"module"}