{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox, message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport cookie from \"react-cookies\";\nimport Router from \"next/router\";\nimport Layout from \"../components/layout/Layout\";\nimport RegisterForm from \"../components/forms/RegisterForm\";\nimport { registerUser as _registerUser } from \"../redux/index\";\n\nfunction RegisterPage(props) {\n  useEffect(function () {\n    if (cookie.load(\"token\")) {\n      return Router.push(\"/\");\n    }\n  }, []);\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    props.form.validateFields(function _callee(err, values) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (err) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(props.registerUser(values, props.history, message));\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 6]]);\n    });\n  };\n\n  var getFieldDecorator = props.form.getFieldDecorator;\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"login__form-container\"\n  }, __jsx(RegisterForm, {\n    getFieldDecorator: getFieldDecorator,\n    registerLoader: props.registerLoader,\n    handleSubmit: handleSubmit\n  })));\n}\n\nvar WrappedRegisterForm = Form.create({\n  name: \"register_form\"\n})(RegisterPage);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    registerLoader: state.user.registerLoader\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    registerUser: function registerUser(data, history, message) {\n      return _registerUser(data, history, message)(dispatch);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegisterForm);","map":null,"metadata":{},"sourceType":"module"}