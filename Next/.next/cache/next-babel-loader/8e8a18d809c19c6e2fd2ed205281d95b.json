{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, Component } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/index\";\nimport Link from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => __jsx(Tag, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, tag));\n};\n\nclass Questions extends Component {\n  static async getInitialProps({\n    store,\n    isServer,\n    pathname,\n    query\n  }) {\n    const action = await getQuestions(\"\");\n    await action(store.dispatch);\n    return {\n      questions: store.getState().questions\n    };\n  }\n\n  render() {\n    const props = this.props;\n    console.log(props);\n    return __jsx(Questions, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  }\n\n} // Questions.getInitialProps = ({store, isServer, pathname, query}) => {\n//   console.log(store)\n//   return store\n// }\n\n\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/index.js"],"names":["React","useEffect","Component","List","Button","Skeleton","Avatar","Tag","connect","getQuestions","Link","AskQuestion","colorList","getUpVotesLength","votes","upVotes","filter","type","length","getDownVotesLength","renderTags","tags","map","tag","Questions","getInitialProps","store","isServer","pathname","query","action","dispatch","questions","getState","render","props","console","log","mapStateToProps","state","question","questionsLoader","mapDispatchToProps","search","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyCC,GAAzC,QAAoD,MAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAQC,IAAR,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,MAAMC,SAAS,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAlB;;AAGA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAK,IAApC,CAAhB;AACA,SAAOF,OAAO,CAACG,MAAf;AACD,CAHD;;AAKA,MAAMC,kBAAkB,GAAGL,KAAK,IAAI;AAClC,QAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAK,KAApC,CAAhB;AACA,SAAOF,OAAO,CAACG,MAAf;AACD,CAHD;;AAKA,MAAME,UAAU,GAAGC,IAAI,IAAI;AACzB,SAAOA,IAAI,CAACC,GAAL,CAASC,GAAG,IAAI,MAAC,GAAD;AAAK,IAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,GAAnB,CAAhB,CAAP;AACD,CAFD;;AAGA,MAAMC,SAAN,SAAwBtB,SAAxB,CAAkC;AAC9B,eAAauB,eAAb,CAA6B;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAA7B,EAAiE;AAE/D,UAAMC,MAAM,GAAG,MAAMrB,YAAY,CAAC,EAAD,CAAjC;AAEA,UAAMqB,MAAM,CAACJ,KAAK,CAACK,QAAP,CAAZ;AAEA,WAAO;AAACC,MAAAA,SAAS,EAACN,KAAK,CAACO,QAAN,GAAiBD;AAA5B,KAAP;AAEC;;AACLE,EAAAA,MAAM,GAAG;AACL,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF,WACE,MAAC,SAAD,eAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAGD;;AAhB+B,C,CAmBlC;AACA;AACA;AACA;;;AACA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCP,EAAAA,SAAS,EAAEO,KAAK,CAACC,QAAN,CAAeR,SADM;AAEhCS,EAAAA,eAAe,EAAEF,KAAK,CAACC,QAAN,CAAeC;AAFA,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGX,QAAQ,IAAI;AACrC,SAAO;AACLtB,IAAAA,YAAY,EAAE,CAACkC,MAAD,EAASC,OAAT,KAAqBb,QAAQ,CAACtB,YAAY,CAACkC,MAAD,EAASC,OAAT,CAAb;AADtC,GAAP;AAGD,CAJD;;AAKA,eAAepC,OAAO,CAAC8B,eAAD,EAAiBI,kBAAjB,CAAP,CAA4ClB,SAA5C,CAAf","sourcesContent":["import React, { useEffect, Component } from \"react\";\nimport { List, Button, Skeleton, Avatar, Tag } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/index\";\nimport  Link  from \"next/link\";\nimport AskQuestion from \"../components/askQuestion/AskQuestion\";\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({ type }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => <Tag color=\"blue\">{tag}</Tag>);\n};\nclass Questions extends Component {\n    static async getInitialProps({store, isServer, pathname, query}) {\n  \n      const action = await getQuestions(\"\")\n\n      await action(store.dispatch)\n  \n      return {questions:store.getState().questions}\n\n      }\n  render() {\n      const props = this.props;\n      console.log(props)\n    return (\n      <Questions {...props}/>\n    );\n  }\n}\n\n// Questions.getInitialProps = ({store, isServer, pathname, query}) => {\n//   console.log(store)\n//   return store\n// }\nconst mapStateToProps = state => ({\n  questions: state.question.questions,\n  questionsLoader: state.question.questionsLoader\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestions: (search, message) => dispatch(getQuestions(search, message))\n  };\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}