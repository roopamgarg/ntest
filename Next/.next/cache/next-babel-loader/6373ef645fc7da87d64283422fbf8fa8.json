{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST } from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nvar loginUserRequest = function loginUserRequest() {\n  return {\n    type: LOGIN_USER_REQUEST\n  };\n};\n\nvar loginUserSuccess = function loginUserSuccess(res) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar loginUserFailure = function loginUserFailure(err) {\n  return {\n    type: LOGIN_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var logoutUser = function logoutUser(history) {\n  Router.push(\"/\");\n  return {\n    type: LOGOUT_USER\n  };\n};\nexport var loginUser = function loginUser(data, history, message) {\n  var email = data.email,\n      password = data.password;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(email && password)) {\n    return function (dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function _callee(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(loginUserRequest());\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"user/login\"), data));\n\n          case 4:\n            res = _context.sent;\n            res = response.data;\n            dispatch(loginUserSuccess(res));\n            Router.replace(\"/\");\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            message.error(_context.t0.response.data.message);\n            dispatch(loginUserFailure(_context.t0.message));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};\n\nvar registerUserRequest = function registerUserRequest() {\n  return {\n    type: REGISTER_USER_REQUEST\n  };\n};\n\nvar registerUserSuccess = function registerUserSuccess(res) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar registerUserFailure = function registerUserFailure(err) {\n  return {\n    type: REGISTER_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var registerUser = function registerUser(data, history, message) {\n  var displayName = data.displayName,\n      email = data.email,\n      password = data.password;\n  displayName = typeof displayName === \"string\" && displayName.trim().length > 0 ? displayName.trim() : false;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(displayName && email && password)) {\n    return function (dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function (dispatch) {\n    dispatch(registerUserRequest());\n    axios.post(\"\".concat(API_URL, \"user/register\"), {\n      displayName: displayName,\n      email: email,\n      password: password\n    }).then(function (response) {\n      var res = response.data;\n      dispatch(registerUserSuccess(res));\n      Router.push(\"/\");\n    })[\"catch\"](function (error) {\n      message.error(error.response.data.message);\n      dispatch(registerUserFailure(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/user/userActions.js"],"names":["LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","REGISTER_USER_FAILURE","REGISTER_USER_SUCCESS","REGISTER_USER_REQUEST","API_URL","validateEmail","Router","axios","loginUserRequest","type","loginUserSuccess","res","payload","loginUserFailure","err","logoutUser","history","push","loginUser","data","message","email","password","trim","length","dispatch","error","registerUserFailure","post","response","replace","registerUserRequest","registerUserSuccess","registerUser","displayName","then"],"mappings":"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","sourcesContent":["import {\n  LOGIN_USER_REQUEST,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_FAILURE,\n  LOGOUT_USER,\n  REGISTER_USER_FAILURE,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_REQUEST\n} from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nconst loginUserRequest = () => ({\n  type: LOGIN_USER_REQUEST\n});\n\nconst loginUserSuccess = res => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: res\n});\n\nconst loginUserFailure = err => ({\n  type: LOGIN_USER_FAILURE,\n  payload: err\n});\n\nexport const logoutUser = history => {\n  Router.push(\"/\");\n  return {\n    type: LOGOUT_USER\n  };\n};\n\nexport const loginUser = (data, history, message) => {\n  let { email, password } = data;\n\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(email && password)) {\n    return function(dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return async function(dispatch) {\n    try {\n      dispatch(loginUserRequest());\n      let res = await axios.post(`${API_URL}user/login`, data);\n      res = response.data;\n      dispatch(loginUserSuccess(res));\n      Router.replace(\"/\");\n    } catch (error) {\n      message.error(error.response.data.message);\n      dispatch(loginUserFailure(error.message));\n    }\n  };\n};\n\nconst registerUserRequest = () => ({\n  type: REGISTER_USER_REQUEST\n});\n\nconst registerUserSuccess = res => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: res\n});\n\nconst registerUserFailure = err => ({\n  type: REGISTER_USER_FAILURE,\n  payload: err\n});\n\nexport const registerUser = (data, history, message) => {\n  let { displayName, email, password } = data;\n  displayName =\n    typeof displayName === \"string\" && displayName.trim().length > 0\n      ? displayName.trim()\n      : false;\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(displayName && email && password)) {\n    return function(dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return function(dispatch) {\n    dispatch(registerUserRequest());\n    axios\n      .post(`${API_URL}user/register`, { displayName, email, password })\n      .then(response => {\n        const res = response.data;\n        dispatch(registerUserSuccess(res));\n\n        Router.push(\"/\");\n      })\n      .catch(error => {\n        message.error(error.response.data.message);\n        dispatch(registerUserFailure(error.message));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}