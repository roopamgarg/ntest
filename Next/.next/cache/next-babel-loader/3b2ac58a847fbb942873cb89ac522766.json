{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST } from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nvar loginUserRequest = function loginUserRequest() {\n  return {\n    type: LOGIN_USER_REQUEST\n  };\n};\n\nvar loginUserSuccess = function loginUserSuccess(res) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar loginUserFailure = function loginUserFailure(err) {\n  return {\n    type: LOGIN_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var logoutUser = function logoutUser() {\n  Router.push(\"/\");\n  return {\n    type: LOGOUT_USER\n  };\n};\nexport var loginUser = function loginUser(data, message) {\n  var email = data.email,\n      password = data.password;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(email && password)) {\n    return function (dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function _callee(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(loginUserRequest());\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"user/login\"), data));\n\n          case 4:\n            res = _context.sent;\n            res = res.data;\n            Router.replace(\"/\");\n            dispatch(loginUserSuccess(res));\n            _context.next = 15;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            message.error(_context.t0.response.data.message);\n            dispatch(loginUserFailure(_context.t0.message));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};\n\nvar registerUserRequest = function registerUserRequest() {\n  return {\n    type: REGISTER_USER_REQUEST\n  };\n};\n\nvar registerUserSuccess = function registerUserSuccess(res) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: res\n  };\n};\n\nvar registerUserFailure = function registerUserFailure(err) {\n  return {\n    type: REGISTER_USER_FAILURE,\n    payload: err\n  };\n};\n\nexport var registerUser = function registerUser(data, history, message) {\n  var displayName = data.displayName,\n      email = data.email,\n      password = data.password;\n  displayName = typeof displayName === \"string\" && displayName.trim().length > 0 ? displayName.trim() : false;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(displayName && email && password)) {\n    return function (dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(registerUserRequest());\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"\".concat(API_URL, \"user/register\"), {\n              displayName: displayName,\n              email: email,\n              password: password\n            }));\n\n          case 4:\n            response = _context2.sent;\n            response = response.data;\n            dispatch(registerUserSuccess(response));\n            Router.push(\"/\");\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            message.error(_context2.t0.response.data.message);\n            dispatch(registerUserFailure(_context2.t0.message));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}