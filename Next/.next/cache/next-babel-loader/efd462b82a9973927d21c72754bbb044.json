{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  GET_QUESTIONS_FAILURE,\n  GET_QUESTIONS_REQUEST,\n  GET_QUESTIONS_SUCCESS,\n  GET_QUESTION_DESCRIPTION_FAILURE,\n  GET_QUESTION_DESCRIPTION_REQUEST,\n  GET_QUESTION_DESCRIPTION_SUCCESS,\n  ASK_QUESTION_REQUEST,\n  ASK_QUESTION_SUCCESS,\n  ASK_QUESTION_FAILURE,\n  ADD_REPLY_REQUEST,\n  ADD_REPLY_SUCCESS,\n  ADD_REPLY_FAILURE,\n  EDIT_REPLY\n} = require(\"./questionTypes\");\n\nconst initialState = {\n  questions: [],\n  questionsLoader: false,\n  getQuestionsFailure: null,\n  currentQuestion: {},\n  currentQuestionLoader: false,\n  currentQuestionFailure: null,\n  askQuestionLoader: false,\n  addQuestionLoader: false\n};\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_QUESTIONS_REQUEST:\n      return _objectSpread({}, state, {\n        questionsLoader: true,\n        getQuestionsFailure: null\n      });\n\n    case GET_QUESTIONS_SUCCESS:\n      return _objectSpread({}, state, {\n        questions: action.payload,\n        questionsLoader: false,\n        getQuestionsFailure: null\n      });\n\n    case GET_QUESTIONS_FAILURE:\n      return _objectSpread({}, state, {\n        questionsLoader: false,\n        getQuestionsFailure: action.payload\n      });\n\n    case GET_QUESTION_DESCRIPTION_REQUEST:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: true,\n        currentQuestionFailure: null\n      });\n\n    case GET_QUESTION_DESCRIPTION_SUCCESS:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: false,\n        currentQuestion: action.payload\n      });\n\n    case GET_QUESTION_DESCRIPTION_FAILURE:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: false,\n        currentQuestionFailure: action.payload\n      });\n\n    case ASK_QUESTION_REQUEST:\n      return _objectSpread({}, state, {\n        askQuestionLoader: true\n      });\n\n    case ASK_QUESTION_SUCCESS:\n      return _objectSpread({}, state, {\n        askQuestionLoader: false\n      });\n\n    case ASK_QUESTION_FAILURE:\n      return _objectSpread({}, state, {\n        askQuestionLoader: false\n      });\n\n    case ADD_REPLY_REQUEST:\n      return _objectSpread({}, state, {\n        addQuestionLoader: true\n      });\n\n    case ADD_REPLY_SUCCESS:\n      return _objectSpread({}, state, {\n        addQuestionLoader: false\n      });\n\n    case ADD_REPLY_FAILURE:\n      return _objectSpread({}, state, {\n        addQuestionLoader: false\n      });\n\n    case EDIT_REPLY:\n      const index = state.currentQuestion.replies.findIndex(({\n        _id\n      }) => _id === action.payload._id);\n      console.log(state);\n      let question = state.currentQuestion;\n      question.replies[index] = action.payload;\n      return _objectSpread({}, state, {\n        currentQuestion: _objectSpread({}, question)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default questionReducer;","map":null,"metadata":{},"sourceType":"module"}