{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/register.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\nimport './RegisterForm.scss';\nimport { loginUser as _loginUser, registerUser as _registerUser } from '../redux/index';\nimport { connect } from \"react-redux\";\nimport { message } from 'antd';\nimport cookie from \"react-cookies\";\n\nfunction RegisterForm(props) {\n  useEffect(function () {\n    if (cookie.load('token')) {\n      return props.history.push('/');\n    }\n  });\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    props.form.validateFields(function (err, values) {\n      if (!err) {\n        props.registerUser(values, props.history, message);\n      }\n    });\n  };\n\n  var getFieldDecorator = props.form.getFieldDecorator;\n  return __jsx(\"div\", {\n    className: \"register__form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(Form, {\n    onSubmit: handleSubmit,\n    className: \"login-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, getFieldDecorator(\"displayName\", {\n    rules: [{\n      required: true,\n      message: \"Please input your display name!\"\n    }]\n  })(__jsx(Input, {\n    prefix: __jsx(Icon, {\n      type: \"user\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }),\n    placeholder: \"Dispaly Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, getFieldDecorator(\"email\", {\n    rules: [{\n      required: true,\n      message: \"Please input your email!\"\n    }]\n  })(__jsx(Input, {\n    prefix: __jsx(Icon, {\n      type: \"mail\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }),\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, getFieldDecorator(\"password\", {\n    rules: [{\n      required: true,\n      message: \"Please input your Password!\"\n    }]\n  })(__jsx(Input, {\n    prefix: __jsx(Icon, {\n      type: \"lock\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }),\n    type: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))), __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(Button, {\n    type: \"primary\",\n    loading: props.registerLoader,\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Register\"))));\n}\n\nvar WrappedRegisterForm = Form.create({\n  name: \"register_form\"\n})(RegisterForm);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    registerLoader: state.user.registerLoader\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loginUser: function loginUser(data, history, message) {\n      return dispatch(_loginUser(data, history, message));\n    },\n    registerUser: function registerUser(data, history, message) {\n      return dispatch(_registerUser(data, history, message));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegisterForm);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/pages/register.js"],"names":["React","useEffect","Form","Icon","Input","Button","Checkbox","loginUser","registerUser","connect","message","cookie","RegisterForm","props","load","history","push","handleSubmit","e","preventDefault","form","validateFields","err","values","getFieldDecorator","rules","required","color","registerLoader","WrappedRegisterForm","create","name","mapStateToProps","state","user","mapDispatchToProps","dispatch","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,QAApC,QAAoD,MAApD;AACA,OAAO,qBAAP;AACA,SAASC,SAAS,IAATA,UAAT,EAAoBC,YAAY,IAAZA,aAApB,QAAwC,gBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BZ,EAAAA,SAAS,CAAC,YAAI;AACZ,QAAGU,MAAM,CAACG,IAAP,CAAY,OAAZ,CAAH,EAAwB;AACtB,aAAOD,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAmB,GAAnB,CAAP;AACD;AACF,GAJQ,CAAT;;AAKA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAN,IAAAA,KAAK,CAACO,IAAN,CAAWC,cAAX,CAA0B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACzC,UAAI,CAACD,GAAL,EAAU;AACRT,QAAAA,KAAK,CAACL,YAAN,CAAmBe,MAAnB,EAA0BV,KAAK,CAACE,OAAhC,EAAwCL,OAAxC;AACD;AACF,KAJD;AAKD,GAPD;;AAN2B,MAcnBc,iBAdmB,GAcGX,KAAK,CAACO,IAdT,CAcnBI,iBAdmB;AAe3B,SACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEP,YAAhB;AAA8B,IAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCO,iBAAiB,CAAC,aAAD,EAAgB;AAChCC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBhB,MAAAA,OAAO,EAAE;AAA3B,KAAD;AADyB,GAAhB,CAAjB,CAGC,MAAC,KAAD;AACE,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,WAAW,EAAC,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD,CADJ,EAWE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,iBAAiB,CAAC,OAAD,EAAU;AAC1BC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBhB,MAAAA,OAAO,EAAE;AAA3B,KAAD;AADmB,GAAV,CAAjB,CAGC,MAAC,KAAD;AACE,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,WAAW,EAAC,OAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADH,CAXF,EAqBE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,iBAAiB,CAAC,UAAD,EAAa;AAC7BC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBhB,MAAAA,OAAO,EAAE;AAA3B,KAAD;AADsB,GAAb,CAAjB,CAGC,MAAC,KAAD;AACE,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,WAAW,EAAC,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADH,CArBF,EAgCE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEd,KAAK,CAACe,cAAtC;AAAsD,IAAA,QAAQ,EAAC,QAA/D;AAAwE,IAAA,SAAS,EAAC,mBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CAhCF,CADE,CADJ;AA6CD;;AACD,IAAMC,mBAAmB,GAAG3B,IAAI,CAAC4B,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAC1BnB,YAD0B,CAA5B;;AAKA,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCL,IAAAA,cAAc,EAACK,KAAK,CAACC,IAAN,CAAWN;AADM,GAAL;AAAA,CAA7B;;AAIE,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACL7B,IAAAA,SAAS,EAAE,mBAAC8B,IAAD,EAAMtB,OAAN,EAAcL,OAAd;AAAA,aAA0B0B,QAAQ,CAAC7B,UAAS,CAAC8B,IAAD,EAAMtB,OAAN,EAAcL,OAAd,CAAV,CAAlC;AAAA,KADN;AAELF,IAAAA,YAAY,EAAE,sBAAC6B,IAAD,EAAMtB,OAAN,EAAcL,OAAd;AAAA,aAA0B0B,QAAQ,CAAC5B,aAAY,CAAC6B,IAAD,EAAMtB,OAAN,EAAcL,OAAd,CAAb,CAAlC;AAAA;AAFT,GAAP;AAKD,CAND;;AAOF,eAAeD,OAAO,CAACuB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CN,mBAA7C,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\nimport './RegisterForm.scss';\nimport { loginUser, registerUser } from '../redux/index';\nimport { connect } from \"react-redux\";\nimport { message } from 'antd';\nimport cookie from \"react-cookies\";\n\n\nfunction RegisterForm(props) {\n  useEffect(()=>{\n    if(cookie.load('token')){\n      return props.history.push('/')\n    }\n  })\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        props.registerUser(values,props.history,message)\n      }\n    });\n  };\n  const { getFieldDecorator } = props.form;\n  return (\n      <div className=\"register__form-container\">\n    <Form onSubmit={handleSubmit} className=\"login-form\">\n        <Form.Item>\n        {getFieldDecorator(\"displayName\", {\n          rules: [{ required: true, message: \"Please input your display name!\" }]\n        })(\n          <Input\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"Dispaly Name\"\n          />\n        )}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"email\", {\n          rules: [{ required: true, message: \"Please input your email!\" }]\n        })(\n          <Input\n            prefix={<Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"Email\"\n          />\n        )}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"password\", {\n          rules: [{ required: true, message: \"Please input your Password!\" }]\n        })(\n          <Input\n            prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        )}\n      </Form.Item>\n      <Form.Item>\n      \n        \n        <Button type=\"primary\" loading={props.registerLoader} htmlType=\"submit\" className=\"login-form-button\">\n            Register\n        </Button>\n        \n      </Form.Item>\n    </Form>\n    </div>\n  );\n}\nconst WrappedRegisterForm = Form.create({ name: \"register_form\" })(\n  RegisterForm\n);\n\n\nconst mapStateToProps = state => ({\n  registerLoader:state.user.registerLoader\n});\n  \n  const mapDispatchToProps = dispatch => {\n    return {\n      loginUser: (data,history,message) => dispatch(loginUser(data,history,message)),\n      registerUser: (data,history,message) => dispatch(registerUser(data,history,message)),\n\n    };\n  };\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegisterForm);\n"]},"metadata":{},"sourceType":"module"}