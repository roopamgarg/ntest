{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questionDescription/QuestionDescription.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { List, Button, Avatar } from 'antd';\nimport Reply from '../reply/Reply';\n\nconst IconText = ({\n  type,\n  text\n}) => __jsx(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, __jsx(Icon, {\n  type: type,\n  style: {\n    marginRight: 8\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}), text);\n\nconst getUpVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === true);\n  return upVotes.length;\n};\n\nconst getDownVotesLength = votes => {\n  const upVotes = votes.filter(({\n    type\n  }) => type === false);\n  return upVotes.length;\n};\n\nconst renderTags = tags => {\n  return tags.map(tag => __jsx(Tag, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, tag));\n};\n\nfunction QuestionDescription(props) {\n  const {\n    item\n  } = props;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(List.Item, {\n    key: item._id,\n    actions: [__jsx(Button, {\n      onClick: () => props.voteQuestion(item._id, true, props.history),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, __jsx(IconText, {\n      type: \"up\",\n      text: getUpVotesLength(item.votes),\n      key: \"list-vertical-star-o\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })), __jsx(Button, {\n      onClick: () => props.voteQuestion(item._id, false, props.history),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(IconText, {\n      type: \"down\",\n      text: getDownVotesLength(item.votes),\n      key: \"list-vertical-like-o\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(IconText, {\n      type: \"message\",\n      text: item.replies.length,\n      key: \"list-vertical-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), __jsx(Reply, _extends({\n      questionId: item._id\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), \"Add Reply\")],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(List.Item.Meta, {\n    avatar: __jsx(Avatar, {\n      style: {\n        backgroundColor: \"#f56a00\",\n        verticalAlign: \"middle\"\n      },\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, item.creator.displayName[0].toUpperCase(), \" \"),\n    title: __jsx(\"a\", {\n      href: item.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, item.title),\n    description: renderTags(item.tags),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(ReactMarkdown, {\n    source: item.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), __jsx(Replies, _extends({\n    replies: item.replies\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })));\n}\n\nexport default QuestionDescription;","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questionDescription/QuestionDescription.js"],"names":["React","List","Button","Avatar","Reply","IconText","type","text","marginRight","getUpVotesLength","votes","upVotes","filter","length","getDownVotesLength","renderTags","tags","map","tag","QuestionDescription","props","item","_id","voteQuestion","history","replies","backgroundColor","verticalAlign","creator","displayName","toUpperCase","href","title","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { List, Button, Avatar } from 'antd';\nimport Reply from '../reply/Reply';\nconst IconText = ({ type, text }) => (\n    <span>\n      <Icon type={type} style={{ marginRight: 8 }} />\n      {text}\n    </span>\n  );\nconst getUpVotesLength = votes => {\n    const upVotes = votes.filter(({ type }) => type === true);\n    return upVotes.length;\n  };\n  \n  const getDownVotesLength = votes => {\n    const upVotes = votes.filter(({ type }) => type === false);\n    return upVotes.length;\n  };\n  const renderTags = tags => {\n    return tags.map(tag => <Tag color=\"blue\">{tag}</Tag>);\n  };\nfunction QuestionDescription(props) {\n    const {item} = props\n    return (\n        <div>\n        <List.Item\n          key={item._id}\n          actions={[\n            <Button\n              onClick={() =>\n                props.voteQuestion(item._id, true, props.history)\n              }\n            >\n              <IconText\n                type=\"up\"\n                text={getUpVotesLength(item.votes)}\n                key=\"list-vertical-star-o\"\n              />\n            </Button>,\n            <Button\n              onClick={() =>\n                props.voteQuestion(item._id, false, props.history)\n              }\n            >\n              <IconText\n                type=\"down\"\n                text={getDownVotesLength(item.votes)}\n                key=\"list-vertical-like-o\"\n              />\n            </Button>,\n            <Button>\n              <IconText\n                type=\"message\"\n                text={item.replies.length}\n                key=\"list-vertical-message\"\n              />\n            </Button>,\n            <Reply questionId={item._id} {...props}>\n              Add Reply\n            </Reply>\n          ]}\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar\n                style={{\n                  backgroundColor: \"#f56a00\",\n                  verticalAlign: \"middle\"\n                }}\n                size=\"large\"\n              >\n                {item.creator.displayName[0].toUpperCase()}{\" \"}\n              </Avatar>\n            }\n            title={<a href={item.href}>{item.title}</a>}\n            description={renderTags(item.tags)}\n          />\n          <ReactMarkdown source={item.description} />\n        </List.Item>\n        <Replies replies={item.replies} {...props} />\n      </div>\n    );\n}\n\nexport default QuestionDescription;"]},"metadata":{},"sourceType":"module"}