{"ast":null,"code":"import { LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGIN_USER_FAILURE, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST } from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nconst loginUserRequest = () => ({\n  type: LOGIN_USER_REQUEST\n});\n\nconst loginUserSuccess = res => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: res\n});\n\nconst loginUserFailure = err => ({\n  type: LOGIN_USER_FAILURE,\n  payload: err\n});\n\nexport const logoutUser = () => {\n  return {\n    type: LOGOUT_USER\n  };\n};\nexport const loginUser = (data, message) => {\n  let {\n    email,\n    password\n  } = data;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(email && password)) {\n    return function (dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return async function (dispatch) {\n    try {\n      dispatch(loginUserRequest());\n      let res = await axios.post(`${API_URL}user/login`, data);\n      res = res.data; // Router.replace(\"/\");\n\n      dispatch(loginUserSuccess(res));\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n      dispatch(loginUserFailure(error.message));\n    }\n  };\n};\n\nconst registerUserRequest = () => ({\n  type: REGISTER_USER_REQUEST\n});\n\nconst registerUserSuccess = res => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: res\n});\n\nconst registerUserFailure = err => ({\n  type: REGISTER_USER_FAILURE,\n  payload: err\n});\n\nexport const registerUser = (data, history, message) => {\n  let {\n    displayName,\n    email,\n    password\n  } = data;\n  displayName = typeof displayName === \"string\" && displayName.trim().length > 0 ? displayName.trim() : false;\n  email = typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password = typeof password === \"string\" && password.trim().length > 0 ? password : false;\n\n  if (!(displayName && email && password)) {\n    return function (dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n\n  return async function (dispatch) {\n    try {\n      dispatch(registerUserRequest());\n      let response = await axios.post(`${API_URL}user/register`, {\n        displayName,\n        email,\n        password\n      });\n      response = response.data;\n      dispatch(registerUserSuccess(response));\n      Router.push(\"/\");\n    } catch (error) {\n      message.error(error.response.data.message);\n      dispatch(registerUserFailure(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/user/userActions.js"],"names":["LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER","REGISTER_USER_FAILURE","REGISTER_USER_SUCCESS","REGISTER_USER_REQUEST","API_URL","validateEmail","Router","axios","loginUserRequest","type","loginUserSuccess","res","payload","loginUserFailure","err","logoutUser","loginUser","data","message","email","password","trim","length","dispatch","error","registerUserFailure","post","console","log","response","registerUserRequest","registerUserSuccess","registerUser","history","displayName","push"],"mappings":"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","sourcesContent":["import {\n  LOGIN_USER_REQUEST,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_FAILURE,\n  LOGOUT_USER,\n  REGISTER_USER_FAILURE,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_REQUEST\n} from \"./userTypes\";\nimport API_URL from \"../helpers/API_URL\";\nimport validateEmail from \"../helpers/validateEmail\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\n\nconst loginUserRequest = () => ({\n  type: LOGIN_USER_REQUEST\n});\n\nconst loginUserSuccess = res => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: res\n});\n\nconst loginUserFailure = err => ({\n  type: LOGIN_USER_FAILURE,\n  payload: err\n});\n\nexport const logoutUser = () => {\n  return {\n    type: LOGOUT_USER\n  };\n};\n\nexport const loginUser = (data, message) => {\n  let { email, password } = data;\n\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(email && password)) {\n    return function(dispatch) {\n      if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return async function(dispatch) {\n    try {\n      dispatch(loginUserRequest());\n      let res = await axios.post(`${API_URL}user/login`, data);\n      res = res.data;\n      // Router.replace(\"/\");\n\n       dispatch(loginUserSuccess(res));\n    } catch (error) {\n      console.log(error);\n      message.error(error.response.data.message);\n       dispatch(loginUserFailure(error.message));\n    }\n  };\n};\n\nconst registerUserRequest = () => ({\n  type: REGISTER_USER_REQUEST\n});\n\nconst registerUserSuccess = res => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: res\n});\n\nconst registerUserFailure = err => ({\n  type: REGISTER_USER_FAILURE,\n  payload: err\n});\n\nexport const registerUser = (data, history, message) => {\n  let { displayName, email, password } = data;\n  displayName =\n    typeof displayName === \"string\" && displayName.trim().length > 0\n      ? displayName.trim()\n      : false;\n  email =\n    typeof email === \"string\" && validateEmail(email) ? email.trim() : false;\n  password =\n    typeof password === \"string\" && password.trim().length > 0\n      ? password\n      : false;\n  if (!(displayName && email && password)) {\n    return function(dispatch) {\n      if (!displayName) {\n        message.error(\"Invalid Display Name\");\n        dispatch(registerUserFailure(\"Invalid Display Name\"));\n      } else if (!email) {\n        message.error(\"Invalid Email\");\n        dispatch(registerUserFailure(\"Invalid Email\"));\n      } else if (password) {\n        message.error(\"Invalid Password must be more than 5 characters\");\n        dispatch(registerUserFailure(\"Invalid Password\"));\n      }\n    };\n  }\n  return async function(dispatch) {\n    try {\n      dispatch(registerUserRequest());\n      let response = await axios.post(`${API_URL}user/register`, {\n        displayName,\n        email,\n        password\n      });\n\n      response = response.data;\n      dispatch(registerUserSuccess(response));\n\n      Router.push(\"/\");\n    } catch (error) {\n      message.error(error.response.data.message);\n      dispatch(registerUserFailure(error.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}