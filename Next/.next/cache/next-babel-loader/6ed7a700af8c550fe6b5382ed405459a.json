{"ast":null,"code":"var _jsxFileName = \"/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questionDescription/Replies.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { List, Comment, Avatar, Tooltip, Icon } from 'antd';\nimport { connect } from \"react-redux\";\nimport { voteReply as _voteReply } from \"../../redux/index\";\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nvar colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nvar getUpVotesLength = function getUpVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref) {\n    var type = _ref.type;\n    return type === true;\n  });\n  return upVotes.length;\n};\n\nvar getDownVotesLength = function getDownVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref2) {\n    var type = _ref2.type;\n    return type === false;\n  });\n  return upVotes.length;\n};\n\nfunction Replies(props) {\n  var getActions = function getActions(votes, replyId) {\n    var actions = [__jsx(\"span\", {\n      key: \"comment-basic-like\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, __jsx(Tooltip, {\n      title: \"Up Vote\",\n      onClick: function onClick() {\n        return props.voteReply(replyId, true, props.history);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(Icon, {\n      type: \"up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, getUpVotesLength(votes))), __jsx(\"span\", {\n      key: \"comment-basic-dislike\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, __jsx(Tooltip, {\n      title: \"Down Vote\",\n      onClick: function onClick() {\n        return props.voteReply(replyId, false, props.history);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, __jsx(Icon, {\n      type: \"down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, getDownVotesLength(votes)))];\n    return actions;\n  };\n\n  var data = props.replies;\n  return __jsx(List, {\n    className: \"comment-list\",\n    header: \"\".concat(data.length, \" replies\"),\n    itemLayout: \"horizontal\",\n    dataSource: data,\n    renderItem: function renderItem(item, index) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, __jsx(Comment, {\n        actions: getActions(item.votes, item._id),\n        author: item.user.displayName,\n        avatar: __jsx(Avatar, {\n          style: {\n            backgroundColor: colorList[index % 4],\n            verticalAlign: \"middle\"\n          },\n          size: \"large\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, item.user.displayName[0].toUpperCase(), \" \"),\n        content: __jsx(ReactMarkdown, {\n          source: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }),\n        datetime: moment(item.createdAt).calendar(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    voteReply: function voteReply(id, type, history) {\n      return dispatch(_voteReply(id, type, history));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Replies);","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/components/questionDescription/Replies.js"],"names":["React","List","Comment","Avatar","Tooltip","Icon","connect","voteReply","moment","ReactMarkdown","colorList","getUpVotesLength","votes","upVotes","filter","type","length","getDownVotesLength","Replies","props","getActions","replyId","actions","history","paddingLeft","cursor","data","replies","item","index","_id","user","displayName","backgroundColor","verticalAlign","toUpperCase","text","createdAt","calendar","mapStateToProps","state","mapDispatchToProps","dispatch","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { List, Comment, Avatar, Tooltip, Icon } from 'antd';\nimport { connect } from \"react-redux\";\nimport { voteReply } from \"../../redux/index\";\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\n\nconst colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nconst getUpVotesLength = votes => {\n    const upVotes = votes.filter(({ type }) => type === true);\n    return upVotes.length;\n  };\n  \n  const getDownVotesLength = votes => {\n    const upVotes = votes.filter(({ type }) => type === false);\n    return upVotes.length;\n  };\n\nfunction Replies(props) {\n    const getActions = (votes,replyId) => {\n        const actions = [\n            <span key=\"comment-basic-like\">\n              <Tooltip title=\"Up Vote\" onClick={()=>props.voteReply(replyId,true,props.history)}>\n                <Icon\n                  type=\"up\"\n                />\n              </Tooltip>\n              <span style={{ paddingLeft: 8, cursor: 'auto' }}>{getUpVotesLength(votes)}</span>\n            </span>,\n            <span key=\"comment-basic-dislike\">\n              <Tooltip title=\"Down Vote\" onClick={()=>props.voteReply(replyId,false,props.history)}>\n                <Icon\n                  type=\"down\"\n                />\n              </Tooltip>\n              <span style={{ paddingLeft: 8, cursor: 'auto' }}>{getDownVotesLength(votes)}</span>\n            </span>\n          ];\n          return actions\n    }\n    const data = props.replies;\n    return (\n        <List\n        className=\"comment-list\"\n        header={`${data.length} replies`}\n        itemLayout=\"horizontal\"\n        dataSource={data}\n        renderItem={(item,index) => (\n          <li>\n            <Comment\n              actions={getActions(item.votes,item._id)}\n              author={item.user.displayName}\n              avatar={<Avatar   style={{\n                backgroundColor: colorList[index % 4],\n                verticalAlign: \"middle\"\n              }}\n              size=\"large\" >{item.user.displayName[0].toUpperCase()} </Avatar>}\n              content={<ReactMarkdown source={item.text}/>}\n              datetime={moment(item.createdAt).calendar() }\n            />\n          </li>\n        )}\n      />\n    );\n}\nconst mapStateToProps = state => ({ });\n  \nconst mapDispatchToProps = dispatch => {\n  return {\n    voteReply: (id,type,history) => dispatch(voteReply(id,type,history)),\n     \n  };\n};\n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Replies)\n"]},"metadata":{},"sourceType":"module"}