{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  GET_QUESTIONS_FAILURE,\n  GET_QUESTIONS_REQUEST,\n  GET_QUESTIONS_SUCCESS,\n  GET_QUESTION_DESCRIPTION_FAILURE,\n  GET_QUESTION_DESCRIPTION_REQUEST,\n  GET_QUESTION_DESCRIPTION_SUCCESS,\n  ASK_QUESTION_REQUEST,\n  ASK_QUESTION_SUCCESS,\n  ASK_QUESTION_FAILURE,\n  ADD_REPLY_REQUEST,\n  ADD_REPLY_SUCCESS,\n  ADD_REPLY_FAILURE,\n  EDIT_REPLY\n} = require(\"./questionTypes\");\n\nconst initialState = {\n  questions: [],\n  questionsLoader: false,\n  getQuestionsFailure: null,\n  currentQuestion: {},\n  currentQuestionLoader: false,\n  currentQuestionFailure: null,\n  askQuestionLoader: false,\n  addQuestionLoader: false\n};\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_QUESTIONS_REQUEST:\n      return _objectSpread({}, state, {\n        questionsLoader: true,\n        getQuestionsFailure: null\n      });\n\n    case GET_QUESTIONS_SUCCESS:\n      return _objectSpread({}, state, {\n        questions: action.payload,\n        questionsLoader: false,\n        getQuestionsFailure: null\n      });\n\n    case GET_QUESTIONS_FAILURE:\n      return _objectSpread({}, state, {\n        questionsLoader: false,\n        getQuestionsFailure: action.payload\n      });\n\n    case GET_QUESTION_DESCRIPTION_REQUEST:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: true,\n        currentQuestionFailure: null\n      });\n\n    case GET_QUESTION_DESCRIPTION_SUCCESS:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: false,\n        currentQuestion: action.payload\n      });\n\n    case GET_QUESTION_DESCRIPTION_FAILURE:\n      return _objectSpread({}, state, {\n        currentQuestionLoader: false,\n        currentQuestionFailure: action.payload\n      });\n\n    case ASK_QUESTION_REQUEST:\n      return _objectSpread({}, state, {\n        askQuestionLoader: true\n      });\n\n    case ASK_QUESTION_SUCCESS:\n      return _objectSpread({}, state, {\n        askQuestionLoader: false\n      });\n\n    case ASK_QUESTION_FAILURE:\n      return _objectSpread({}, state, {\n        askQuestionLoader: false\n      });\n\n    case ADD_REPLY_REQUEST:\n      return _objectSpread({}, state, {\n        addQuestionLoader: true\n      });\n\n    case ADD_REPLY_SUCCESS:\n      return _objectSpread({}, state, {\n        addQuestionLoader: false\n      });\n\n    case ADD_REPLY_FAILURE:\n      return _objectSpread({}, state, {\n        addQuestionLoader: false\n      });\n\n    case EDIT_REPLY:\n      const index = state.currentQuestion.replies.findIndex(({\n        _id\n      }) => _id === action.payload._id);\n      console.log(state);\n      let question = state.currentQuestion;\n      question.replies[index] = action.payload;\n      return _objectSpread({}, state, {\n        currentQuestion: _objectSpread({}, question)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default questionReducer;","map":{"version":3,"sources":["/home/roopam/Videos/redcarpet/stack-overflow-clone/next-app/redux/question/questionReducers.js"],"names":["GET_QUESTIONS_FAILURE","GET_QUESTIONS_REQUEST","GET_QUESTIONS_SUCCESS","GET_QUESTION_DESCRIPTION_FAILURE","GET_QUESTION_DESCRIPTION_REQUEST","GET_QUESTION_DESCRIPTION_SUCCESS","ASK_QUESTION_REQUEST","ASK_QUESTION_SUCCESS","ASK_QUESTION_FAILURE","ADD_REPLY_REQUEST","ADD_REPLY_SUCCESS","ADD_REPLY_FAILURE","EDIT_REPLY","require","initialState","questions","questionsLoader","getQuestionsFailure","currentQuestion","currentQuestionLoader","currentQuestionFailure","askQuestionLoader","addQuestionLoader","questionReducer","state","action","type","payload","index","replies","findIndex","_id","console","log","question"],"mappings":"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","sourcesContent":["const {\n  GET_QUESTIONS_FAILURE,\n  GET_QUESTIONS_REQUEST,\n  GET_QUESTIONS_SUCCESS,\n  GET_QUESTION_DESCRIPTION_FAILURE,\n  GET_QUESTION_DESCRIPTION_REQUEST,\n  GET_QUESTION_DESCRIPTION_SUCCESS,\n  ASK_QUESTION_REQUEST,\n  ASK_QUESTION_SUCCESS,\n  ASK_QUESTION_FAILURE,\n  ADD_REPLY_REQUEST,\n  ADD_REPLY_SUCCESS,\n  ADD_REPLY_FAILURE,\n  EDIT_REPLY\n} = require(\"./questionTypes\");\n\nconst initialState = {\n  questions: [],\n  questionsLoader: false,\n  getQuestionsFailure: null,\n  currentQuestion: {},\n  currentQuestionLoader: false,\n  currentQuestionFailure: null,\n  askQuestionLoader: false,\n  addQuestionLoader: false\n};\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_QUESTIONS_REQUEST:\n      return {\n        ...state,\n        questionsLoader: true,\n        getQuestionsFailure: null\n      };\n    case GET_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        questions: action.payload,\n        questionsLoader: false,\n        getQuestionsFailure: null\n      };\n    case GET_QUESTIONS_FAILURE:\n      return {\n        ...state,\n        questionsLoader: false,\n        getQuestionsFailure: action.payload\n      };\n    case GET_QUESTION_DESCRIPTION_REQUEST:\n      return {\n        ...state,\n        currentQuestionLoader: true,\n        currentQuestionFailure: null\n      };\n    case GET_QUESTION_DESCRIPTION_SUCCESS:\n      return {\n        ...state,\n        currentQuestionLoader: false,\n        currentQuestion: action.payload\n      };\n    case GET_QUESTION_DESCRIPTION_FAILURE:\n      return {\n        ...state,\n        currentQuestionLoader: false,\n        currentQuestionFailure: action.payload\n      };\n    case ASK_QUESTION_REQUEST:\n      return {\n        ...state,\n        askQuestionLoader: true\n      };\n    case ASK_QUESTION_SUCCESS:\n      return {\n        ...state,\n        askQuestionLoader: false\n      };\n    case ASK_QUESTION_FAILURE:\n      return {\n        ...state,\n        askQuestionLoader: false\n      };\n    case ADD_REPLY_REQUEST:\n      return {\n        ...state,\n        addQuestionLoader: true\n      };\n    case ADD_REPLY_SUCCESS:\n      return {\n        ...state,\n        addQuestionLoader: false\n      };\n    case ADD_REPLY_FAILURE:\n      return {\n        ...state,\n        addQuestionLoader: false\n      };\n    case EDIT_REPLY:\n      const index = state.currentQuestion.replies.findIndex(\n        ({ _id }) => _id === action.payload._id\n      );\n      console.log(state);\n      let question = state.currentQuestion;\n      question.replies[index] = action.payload;\n      return {\n        ...state,\n        currentQuestion: { ...question }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default questionReducer;\n"]},"metadata":{},"sourceType":"module"}