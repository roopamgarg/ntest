{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { List, Comment, Avatar, Tooltip, Icon } from 'antd';\nimport { connect } from \"react-redux\";\nimport { voteReply as _voteReply } from \"../../redux/index\";\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nvar colorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"];\n\nvar getUpVotesLength = function getUpVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref) {\n    var type = _ref.type;\n    return type === true;\n  });\n  return upVotes.length;\n};\n\nvar getDownVotesLength = function getDownVotesLength(votes) {\n  var upVotes = votes.filter(function (_ref2) {\n    var type = _ref2.type;\n    return type === false;\n  });\n  return upVotes.length;\n};\n\nfunction Replies(props) {\n  var getActions = function getActions(votes, replyId) {\n    var actions = [__jsx(\"span\", {\n      key: \"comment-basic-like\"\n    }, __jsx(Tooltip, {\n      title: \"Up Vote\",\n      onClick: function onClick() {\n        return props.voteReply(replyId, true, props.history);\n      }\n    }, __jsx(Icon, {\n      type: \"up\"\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      }\n    }, getUpVotesLength(votes))), __jsx(\"span\", {\n      key: \"comment-basic-dislike\"\n    }, __jsx(Tooltip, {\n      title: \"Down Vote\",\n      onClick: function onClick() {\n        return props.voteReply(replyId, false, props.history);\n      }\n    }, __jsx(Icon, {\n      type: \"down\"\n    })), __jsx(\"span\", {\n      style: {\n        paddingLeft: 8,\n        cursor: 'auto'\n      }\n    }, getDownVotesLength(votes)))];\n    return actions;\n  };\n\n  var data = props.replies;\n  return __jsx(List, {\n    className: \"comment-list\",\n    header: \"\".concat(data.length, \" replies\"),\n    itemLayout: \"horizontal\",\n    dataSource: data,\n    renderItem: function renderItem(item, index) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        actions: getActions(item.votes, item._id),\n        author: item.user.displayName,\n        avatar: __jsx(Avatar, {\n          style: {\n            backgroundColor: colorList[index % 4],\n            verticalAlign: \"middle\"\n          },\n          size: \"large\"\n        }, item.user.displayName[0].toUpperCase(), \" \"),\n        content: __jsx(ReactMarkdown, {\n          source: item.text\n        }),\n        datetime: moment(item.createdAt).calendar()\n      }));\n    }\n  });\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    voteReply: function voteReply(id, type, history) {\n      return _voteReply(id, type, history)(dispatch);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Replies);","map":null,"metadata":{},"sourceType":"module"}